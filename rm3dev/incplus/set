 /*(
 * The information  contained  herein is a trade secret of CAD-UL GmbH,
 * Ulm, Germany, and is confidential information. It is provided  under
 * a license agreement, and may be  copied or disclosed  only under the
 * terms of  that  agreement.  Any  reproduction or disclosure  of this
 * material  without  the express written  authorization of CAD-UL GmbH
 * or persuant to the license agreement is unlawful.
 *
 * Copyright (c) 1991-1998 CAD-UL GmbH
 * An unpublished work by CAD-UL GmbH, Germany
 * All rights reserved.
 *
 *
 * $Log: set,v $
 * Revision 1.2  2000/02/08 06:21:05  pla
 * LIBCXX V210
 *
 * Revision 1.1  1998/05/04 14:43:04  aki
 * Initial revision
 *
 */ 

// set standard header
#ifndef _SET_
#define _SET_


#include <functional>
#include <xtree>

_STD_BEGIN
		// TEMPLATE CLASS set
template<class _K, class _Pr = less<_K>,
	class _A = allocator<_K> >
	class set {
public:
	typedef set<_K, _Pr, _A> _Myt;
	typedef _K value_type;
	struct _Kfn : public unary_function<value_type, _K> {
		const _K& operator()(const value_type& __X) const
		{return (__X); }
		};
	typedef _Pr value_compare;
	typedef _Tree<_K, value_type, _Kfn, _Pr, typename
		_A::_TEMPLATE_MEMBER rebind<value_type>::other> _Imp;
	typedef _K key_type;
	typedef _Pr key_compare;
	typedef typename _Imp::allocator_type allocator_type;
	typedef typename _Imp::size_type size_type;
	typedef typename _Imp::difference_type difference_type;
	typedef typename _Imp::pointer pointer;
	typedef typename _Imp::const_pointer const_pointer;
	typedef typename _Imp::const_reference reference;
	typedef typename _Imp::const_reference const_reference;
	typedef typename _Imp::const_iterator iterator;
	typedef typename _Imp::const_iterator const_iterator;
	typedef typename _Imp::const_reverse_iterator
		reverse_iterator;
	typedef typename _Imp::const_reverse_iterator
		const_reverse_iterator;
	typedef pair<iterator, bool> _Pairib;
	typedef pair<const_iterator, const_iterator> _Paircc;
	set()
		: _Tr(_Pr(), false, _A()) {}
	explicit set(const _Pr& _Pred)
		: _Tr(_Pred, false, _A()) {}
	set(const _Pr& _Pred, const _A& _Al)
		: _Tr(_Pred, false, _Al) {}
	template<class _It>
	set(_It _F, _It __L)
		: _Tr(_Pr(), false, _A())
		{for (; _F != __L; ++_F)
			_Tr.insert(*_F); }
	template<class _It>
	set(_It _F, _It __L, const _Pr& _Pred)
		: _Tr(_Pred, false, _A())
		{for (; _F != __L; ++_F)
			_Tr.insert(*_F); }
	template<class _It>
	set(_It _F, _It __L, const _Pr& _Pred,
		const _A& _Al)
		: _Tr(_Pred, false, _Al)
		{for (; _F != __L; ++_F)
			_Tr.insert(*_F); }
	const_iterator begin() const
		{return (_Tr.begin()); }
	const_iterator end() const
		{return (_Tr.end()); }
	const_reverse_iterator rbegin() const
		{return (_Tr.rbegin()); }
	const_reverse_iterator rend() const
		{return (_Tr.rend()); }
	size_type size() const
		{return (_Tr.size()); }
	size_type max_size() const
		{return (_Tr.max_size()); }
	bool empty() const
		{return (_Tr.empty()); }
	allocator_type get_allocator() const
		{return (_Tr.get_allocator()); }
	_Pairib insert(const value_type& __X)
		{typename _Imp::_Pairib _Ans = _Tr.insert(__X);
		return (_Pairib(_Ans.first, _Ans.second)); }
	iterator insert(iterator __P, const value_type& __X)
		{return (_Tr.insert((typename _Imp::iterator&)__P, __X)); }
	template<class _It>
	void insert(_It _F, _It __L)
		{for (; _F != __L; ++_F)
			_Tr.insert(*_F); }
	iterator erase(iterator __P)
		{return (_Tr.erase((typename _Imp::iterator&)__P)); }
	iterator erase(iterator _F, iterator __L)
		{return (_Tr.erase((typename _Imp::iterator&)_F,
			(typename _Imp::iterator&)__L)); }
	size_type erase(const _K& _Kv)
		{return (_Tr.erase(_Kv)); }
	void clear()
		{_Tr.clear(); }
	void swap(_Myt& __X)
		{_STD swap(_Tr, __X._Tr); }
	key_compare key_comp() const
		{return (_Tr.key_comp()); }
	value_compare value_comp() const
		{return (_Tr.key_comp()); }
	const_iterator find(const _K& _Kv) const
		{return (_Tr.find(_Kv)); }
	size_type count(const _K& _Kv) const
		{return (_Tr.count(_Kv)); }
	const_iterator lower_bound(const _K& _Kv) const
		{return (_Tr.lower_bound(_Kv)); }
	const_iterator upper_bound(const _K& _Kv) const
		{return (_Tr.upper_bound(_Kv)); }
	_Paircc equal_range(const _K& _Kv) const
		{return (_Tr.equal_range(_Kv)); }
protected:
	_Imp _Tr;
	};
		// set TEMPLATE OPERATORS
template<class _K, class _Pr, class _A> inline
	void swap(set<_K, _Pr, _A>& __X,
		set<_K, _Pr, _A>& _Y)
	{__X.swap(_Y); }
template<class _K, class _Pr, class _A> inline
	bool operator==(const set<_K, _Pr, _A>& __X,
		const set<_K, _Pr, _A>& _Y)
	{return (__X.size() == _Y.size()
		&& equal(__X.begin(), __X.end(), _Y.begin())); }
template<class _K, class _Pr, class _A> inline
	bool operator!=(const set<_K, _Pr, _A>& __X,
		const set<_K, _Pr, _A>& _Y)
	{return (!(__X == _Y)); }
template<class _K, class _Pr, class _A> inline
	bool operator<(const set<_K, _Pr, _A>& __X,
		const set<_K, _Pr, _A>& _Y)
	{return (lexicographical_compare(__X.begin(), __X.end(),
		_Y.begin(), _Y.end())); }
template<class _K, class _Pr, class _A> inline
	bool operator>(const set<_K, _Pr, _A>& __X,
		const set<_K, _Pr, _A>& _Y)
	{return (_Y < __X); }
template<class _K, class _Pr, class _A> inline
	bool operator<=(const set<_K, _Pr, _A>& __X,
		const set<_K, _Pr, _A>& _Y)
	{return (!(_Y < __X)); }
template<class _K, class _Pr, class _A> inline
	bool operator>=(const set<_K, _Pr, _A>& __X,
		const set<_K, _Pr, _A>& _Y)
	{return (!(__X < _Y)); }
		// TEMPLATE CLASS multiset
template<class _K, class _Pr = less<_K>,
	class _A = allocator<_K> >
	class multiset {
public:
	typedef multiset<_K, _Pr, _A> _Myt;
	typedef _K value_type;
	struct _Kfn : public unary_function<value_type, _K> {
		const _K& operator()(const value_type& __X) const
		{return (__X); }
		};
	typedef _Pr value_compare;
	typedef _Tree<_K, value_type, _Kfn, _Pr, typename
		_A::_TEMPLATE_MEMBER rebind<value_type>::other> _Imp;
	typedef _K key_type;
	typedef _Pr key_compare;
	typedef typename _Imp::allocator_type allocator_type;
	typedef typename _Imp::size_type size_type;
	typedef typename _Imp::difference_type difference_type;
	typedef typename _Imp::pointer pointer;
	typedef typename _Imp::const_pointer const_pointer;
	typedef typename _Imp::const_reference reference;
	typedef typename _Imp::const_reference const_reference;
	typedef typename _Imp::const_iterator iterator;
	typedef typename _Imp::const_iterator const_iterator;
	typedef typename _Imp::const_reverse_iterator
		reverse_iterator;
	typedef typename _Imp::const_reverse_iterator
		const_reverse_iterator;
	typedef pair<const_iterator, const_iterator> _Paircc;
	multiset()
		: _Tr(_Pr(), true, _A()) {}
	explicit multiset(const _Pr& _Pred)
		: _Tr(_Pred, true, _A()) {}
	multiset(const _Pr& _Pred, const _A& _Al)
		: _Tr(_Pred, true, _Al) {}
	template<class _It>
	multiset(_It _F, _It __L)
		: _Tr(_Pr(), true, _A())
		{for (; _F != __L; ++_F)
			_Tr.insert(*_F); }
	template<class _It>
	multiset(_It _F, _It __L, const _Pr& _Pred)
		: _Tr(_Pred, true, _A())
		{for (; _F != __L; ++_F)
			_Tr.insert(*_F); }
	template<class _It>
	multiset(_It _F, _It __L, const _Pr& _Pred, const _A& _Al)
		: _Tr(_Pred, true, _Al)
		{for (; _F != __L; ++_F)
			_Tr.insert(*_F); }
	const_iterator begin() const
		{return (_Tr.begin()); }
	const_iterator end() const
		{return (_Tr.end()); }
	const_reverse_iterator rbegin() const
		{return (_Tr.rbegin()); }
	const_reverse_iterator rend() const
		{return (_Tr.rend()); }
	size_type size() const
		{return (_Tr.size()); }
	size_type max_size() const
		{return (_Tr.max_size()); }
	bool empty() const
		{return (_Tr.empty()); }
	allocator_type get_allocator() const
		{return (_Tr.get_allocator()); }
	iterator insert(const value_type& __X)
		{return (_Tr.insert(__X).first); }
	iterator insert(iterator __P, const value_type& __X)
		{return (_Tr.insert((typename _Imp::iterator&)__P, __X)); }
	template<class _It>
	void insert(_It _F, _It __L)
		{for (; _F != __L; ++_F)
			_Tr.insert(*_F); }
	iterator erase(iterator __P)
		{return (_Tr.erase((typename _Imp::iterator&)__P)); }
	iterator erase(iterator _F, iterator __L)
		{return (_Tr.erase((typename _Imp::iterator&)_F,
			(typename _Imp::iterator&)__L)); }
	size_type erase(const _K& _Kv)
		{return (_Tr.erase(_Kv)); }
	void clear()
		{_Tr.clear(); }
	void swap(_Myt& __X)
		{_STD swap(_Tr, __X._Tr); }
	key_compare key_comp() const
		{return (_Tr.key_comp()); }
	value_compare value_comp() const
		{return (_Tr.key_comp()); }
	const_iterator find(const _K& _Kv) const
		{return (_Tr.find(_Kv)); }
	size_type count(const _K& _Kv) const
		{return (_Tr.count(_Kv)); }
	const_iterator lower_bound(const _K& _Kv) const
		{return (_Tr.lower_bound(_Kv)); }
	const_iterator upper_bound(const _K& _Kv) const
		{return (_Tr.upper_bound(_Kv)); }
	_Paircc equal_range(const _K& _Kv) const
		{return (_Tr.equal_range(_Kv)); }
protected:
	_Imp _Tr;
	};
		// multiset TEMPLATE OPERATORS
template<class _K, class _Pr, class _A> inline
	void swap(multiset<_K, _Pr, _A>& __X,
		multiset<_K, _Pr, _A>& _Y)
	{__X.swap(_Y); }
template<class _K, class _Pr, class _A> inline
	bool operator==(const multiset<_K, _Pr, _A>& __X,
		const multiset<_K, _Pr, _A>& _Y)
	{return (__X.size() == _Y.size()
		&& equal(__X.begin(), __X.end(), _Y.begin())); }
template<class _K, class _Pr, class _A> inline
	bool operator!=(const multiset<_K, _Pr, _A>& __X,
		const multiset<_K, _Pr, _A>& _Y)
	{return (!(__X == _Y)); }
template<class _K, class _Pr, class _A> inline
	bool operator<(const multiset<_K, _Pr, _A>& __X,
		const multiset<_K, _Pr, _A>& _Y)
	{return (lexicographical_compare(__X.begin(), __X.end(),
		_Y.begin(), _Y.end())); }
template<class _K, class _Pr, class _A> inline
	bool operator>(const multiset<_K, _Pr, _A>& __X,
		const multiset<_K, _Pr, _A>& _Y)
	{return (_Y < __X); }
template<class _K, class _Pr, class _A> inline
	bool operator<=(const multiset<_K, _Pr, _A>& __X,
		const multiset<_K, _Pr, _A>& _Y)
	{return (!(_Y < __X)); }
template<class _K, class _Pr, class _A> inline
	bool operator>=(const multiset<_K, _Pr, _A>& __X,
		const multiset<_K, _Pr, _A>& _Y)
	{return (!(__X < _Y)); }
_STD_END


#endif /* _SET_ */

/*
 * Copyright (c) 1995 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
V2.2:0414 */
