 /*(
 * The information  contained  herein is a trade secret of CAD-UL GmbH,
 * Ulm, Germany, and is confidential information. It is provided  under
 * a license agreement, and may be  copied or disclosed  only under the
 * terms of  that  agreement.  Any  reproduction or disclosure  of this
 * material  without  the express written  authorization of CAD-UL GmbH
 * or persuant to the license agreement is unlawful.
 *
 * Copyright (c) 1991-1998 CAD-UL GmbH
 * An unpublished work by CAD-UL GmbH, Germany
 * All rights reserved.
 *
 *
 * $Log: deque,v $
 * Revision 1.2  2000/02/08 06:20:44  pla
 * LIBCXX V210
 *
 * Revision 1.1  1998/05/04 14:43:00  aki
 * Initial revision
 *
 */ 

// deque standard header
#ifndef _DEQUE_
#define _DEQUE_


#include <iterator>
#include <memory>
#include <stdexcept>
_STD_BEGIN
#define _DEQUEMAPSIZ	4	/* at least 2 */
#define _DEQUESIZ (4096 < sizeof (_Ty) ? 1 : 4096 / sizeof (_Ty))

		// TEMPLATE CLASS _Deque_map
template<class _Ty, class _A>
	class _Deque_map {
protected:
	_Deque_map(_A _Al)
		: _Almap(_Al) {}
	typedef typename _A::_TEMPLATE_MEMBER
		rebind<_Ty>::other::pointer _Tptr;
	_A::_TEMPLATE_MEMBER rebind<_Tptr>::other _Almap;
	};
		// TEMPLATE CLASS _Deque_val
template<class _Ty, class _A>
	class _Deque_val : public _Deque_map<_Ty, _A> {
protected:
	_Deque_val(_A _Al = _A())
		: _Deque_map<_Ty, _A>(_Al), _Alval(_Al) {}
	typedef typename _A::_TEMPLATE_MEMBER
		rebind<_Ty>::other _Alty;
	_Alty _Alval;
	};

		// TEMPLATE CLASS deque
template<class _Ty, class _Ax = allocator<_Ty> >
	class deque
		: public _Deque_val<_Ty, _Ax> {
public:
	typedef deque<_Ty, _Ax> _Myt;
	typedef _Deque_val<_Ty, _Ax> _Mybase;
	typedef typename _Mybase::_Alty _A;
	typedef _A allocator_type;
	typedef typename _A::size_type size_type;
	typedef typename _A::difference_type _Dift;
	typedef _Dift difference_type;
	typedef typename _A::pointer _Tptr;
	typedef typename _A::const_pointer _Ctptr;
	typedef _POINTER_X(_Tptr, _A) _Mapptr;
	typedef typename _A::reference _Reft;
	typedef _Tptr pointer;
	typedef _Ctptr const_pointer;
	typedef _Reft reference;
	typedef typename _A::const_reference const_reference;
	typedef typename _A::value_type value_type;
		// CLASS iterator
	class const_iterator;
	class iterator : public _Ranit<_Ty, _Dift, _Tptr, _Reft> {
	public:
		typedef _Ranit<_Ty, _Dift, _Tptr, _Reft> _Mybase;
		typedef typename _Mybase::iterator_category
			iterator_category;
		typedef typename _Mybase::value_type value_type;
		typedef typename _Mybase::difference_type
			difference_type;
		typedef typename _Mybase::pointer pointer;
		typedef typename _Mybase::reference reference;
		friend class deque<_Ty, _A>;
		friend class const_iterator;
		iterator()
			: _First(0), _Last(0), _Next(0), _Map(0) {}
		iterator(_Tptr __P, _Mapptr _M)
			: _First(*_M), _Last(*_M + _DEQUESIZ),
				_Next(__P), _Map(_M) {}
		reference operator*() const
			{return (*_Next); }
		iterator& operator++()
			{if (_Next != _Last && ++_Next == _Last
				&& _Map[1] != 0)
				{_First = *++_Map;
				_Last = _First + _DEQUESIZ;
				_Next = _First; }
			return (*this); }
		iterator operator++(int)
			{iterator _Tmp = *this;
			++*this;
			return (_Tmp); }
		iterator& operator--()
			{if (_Next != _First)
				--_Next;
			else if (_Map[-1] != 0)
				{_First = *--_Map;
				_Last = _First + _DEQUESIZ;
				_Next = _Last - 1; }
			return (*this); }
		iterator operator--(int)
			{iterator _Tmp = *this;
			--*this;
			return (_Tmp); }
		iterator& operator+=(difference_type __N)
			{_Add(__N);
			return (*this); }
		iterator& operator-=(difference_type __N)
			{return (*this += -__N); }
		iterator operator+(difference_type __N) const
			{iterator _Tmp = *this;
			return (_Tmp += __N); }
		iterator operator-(difference_type __N) const
			{iterator _Tmp = *this;
			return (_Tmp -= __N); }
		difference_type operator-(const iterator& __X) const
			{return (_Map == __X._Map ? _Next - __X._Next
				: _DEQUESIZ * (_Map - __X._Map - 1)
				+ (_Next - _First) + (__X._Last - __X._Next)); }
		reference operator[](difference_type __N) const
			{return (*(*this + __N)); }
		bool operator==(const iterator& __X) const
			{return (_Next == __X._Next); }
		bool operator!=(const iterator& __X) const
			{return (!(*this == __X)); }
		bool operator<(const iterator& __X) const
			{return (_Map < __X._Map
				|| _Map == __X._Map && _Next < __X._Next); }
		bool operator<=(const iterator& __X) const
			{return (!(__X < *this)); }
		bool operator>(const iterator& __X) const
			{return (__X < *this); }
		bool operator>=(const iterator& __X) const
			{return (!(*this < __X)); }
	protected:
		void _Add(difference_type __N)
			{difference_type _Off = __N + _Next - _First;
			difference_type _Moff = (0 <= _Off)
				? _Off / _DEQUESIZ
				: -((_DEQUESIZ - 1 - _Off) / _DEQUESIZ);
			if (_Moff == 0)
				_Next += __N;
			else
				{_Map += _Moff;
				_First = *_Map;
				_Last = _First + _DEQUESIZ;
				_Next = _First + (_Off - _Moff * _DEQUESIZ); }}
	_PROTECTED:
		_Tptr _First, _Last, _Next;
		_Mapptr _Map;
		};
		// CLASS const_iterator
	class const_iterator
		: public _Ranit<_Ty, _Dift, _Ctptr, const_reference> {
	public:
		typedef _Ranit<_Ty, _Dift, _Ctptr, const_reference>
			_Mybase;
		typedef typename _Mybase::iterator_category
			iterator_category;
		typedef typename _Mybase::value_type value_type;
		typedef typename _Mybase::difference_type
			difference_type;
		typedef typename _Mybase::pointer pointer;
		typedef typename _Mybase::reference reference;
		friend class deque<_Ty, _A>;
		const_iterator()
			: _First(0), _Last(0), _Next(0), _Map(0) {}
		const_iterator(_Tptr __P, _Mapptr _M)
			: _First(*_M), _Last(*_M + _DEQUESIZ),
				_Next(__P), _Map(_M) {}
		const_iterator(const iterator& __X)
			: _First(__X._First), _Last(__X._Last),
				_Next(__X._Next), _Map(__X._Map) {}
		const_reference operator*() const
			{return (*_Next); }
		const_iterator& operator++()
			{if (_Next != _Last && ++_Next == _Last
				&& _Map[1] != 0)
				{_First = *++_Map;
				_Last = _First + _DEQUESIZ;
				_Next = _First; }
			return (*this); }
		const_iterator operator++(int)
			{const_iterator _Tmp = *this;
			++*this;
			return (_Tmp); }
		const_iterator& operator--()
			{if (_Next != _First)
				--_Next;
			else if (_Map[-1] != 0)
				{_First = *--_Map;
				_Last = _First + _DEQUESIZ;
				_Next = _Last - 1; }
			return (*this); }
		const_iterator operator--(int)
			{const_iterator _Tmp = *this;
			--*this;
			return (_Tmp); }
		const_iterator& operator+=(difference_type __N)
			{_Add(__N);
			return (*this); }
		const_iterator& operator-=(difference_type __N)
			{return (*this += -__N); }
		const_iterator operator+(difference_type __N) const
			{const_iterator _Tmp = *this;
			return (_Tmp += __N); }
		const_iterator operator-(difference_type __N) const
			{const_iterator _Tmp = *this;
			return (_Tmp -= __N); }
		difference_type operator-(const const_iterator& __X) const
			{return (_Map == __X._Map ? _Next - __X._Next
				: _DEQUESIZ * (_Map - __X._Map - 1)
				+ (_Next - _First) + (__X._Last - __X._Next)); }
		const_reference operator[](difference_type __N) const
			{return (*(*this + __N)); }
		bool operator==(const const_iterator& __X) const
			{return (_Next == __X._Next); }
		bool operator!=(const const_iterator& __X) const
			{return (!(*this == __X)); }
		bool operator<(const const_iterator& __X) const
			{return (_Map < __X._Map
				|| _Map == __X._Map && _Next < __X._Next); }
		bool operator<=(const const_iterator& __X) const
			{return (!(__X < *this)); }
		bool operator>(const const_iterator& __X) const
			{return (__X < *this); }
		bool operator>=(const const_iterator& __X) const
			{return (!(*this < __X)); }
	protected:
		void _Add(difference_type __N)
			{difference_type _Off = __N + _Next - _First;
			difference_type _Moff = (0 <= _Off)
				? _Off / _DEQUESIZ
				: -((_DEQUESIZ - 1 - _Off) / _DEQUESIZ);
			if (_Moff == 0)
				_Next += __N;
			else
				{_Map += _Moff;
				_First = *_Map;
				_Last = _First + _DEQUESIZ;
				_Next = _First + (_Off - _Moff * _DEQUESIZ); }}
	_PROTECTED:
		_Tptr _First, _Last, _Next;
		_Mapptr _Map;
		};
	typedef _STD reverse_iterator<iterator>
		reverse_iterator;
	typedef _STD reverse_iterator<const_iterator>
		const_reverse_iterator;
	deque()
		: _Mybase(), _First(), _Last(),
			_Map(0), _Mapsize(0), _Size(0)
		{}
	explicit deque(const _A& _Al)
		: _Mybase(_Al), _First(), _Last(),
			_Map(0), _Mapsize(0), _Size(0)
		{}
	explicit deque(size_type __N)
		: _Mybase(), _First(), _Last(),
			_Map(0), _Mapsize(0), _Size(0)
		{insert(begin(), __N, _Ty()); }
	deque(size_type __N, const _Ty& _V)
		: _Mybase(), _First(), _Last(),
			_Map(0), _Mapsize(0), _Size(0)
		{insert(begin(), __N, _V); }
	deque(size_type __N, const _Ty& _V, const _A& _Al)
		: _Mybase(_Al), _First(), _Last(),
			_Map(0), _Mapsize(0), _Size(0)
		{insert(begin(), __N, _V); }
	deque(const _Myt& __X)
		: _Mybase(__X._Alval), _First(), _Last(),
			_Map(0), _Mapsize(0), _Size(0)
		{insert(begin(), __X.begin(), __X.end()); }
	template<class _It>
		deque(_It _F, _It __L)
		: _Mybase(), _First(), _Last(),
			_Map(0), _Mapsize(0), _Size(0)
		{_Construct(_F, __L, _Iter_cat(_F)); }
	template<class _It>
		deque(_It _F, _It __L, const _A& _Al)
		: _Mybase(_Al), _First(), _Last(),
			_Map(0), _Mapsize(0), _Size(0)
		{_Construct(_F, __L, _Iter_cat(_F)); }
	template<class _It>
		void _Construct(_It _F, _It __L, _Int_iterator_tag)
		{insert(begin(), (size_type)_F, (_Ty)__L); }
	template<class _It>
		void _Construct(_It _F, _It __L, input_iterator_tag)
		{insert(begin(), _F, __L); }
	~deque()
		{while (!empty())
			pop_front(); }
	_Myt& operator=(const _Myt& __X)
		{if (this != &__X)
			{iterator __S;
			if (__X.size() <= size())
				{__S = copy(__X.begin(), __X.end(), begin());
				erase(__S, end()); }
			else
				{const_iterator _Sx = __X.begin() + size();
				__S = copy(__X.begin(), _Sx, begin());
				insert(end(), _Sx, __X.end()); }}
		return (*this); }
	iterator begin()
		{return (_First); }
	const_iterator begin() const
		{return ((const_iterator)_First); }
	iterator end()
		{return (_Last); }
	const_iterator end() const
		{return ((const_iterator)_Last); }
	reverse_iterator rbegin()
		{return (reverse_iterator(end())); }
	const_reverse_iterator rbegin() const
		{return (const_reverse_iterator(end())); }
	reverse_iterator rend()
		{return (reverse_iterator(begin())); }
	const_reverse_iterator rend() const
		{return (const_reverse_iterator(begin())); }
	void resize(size_type __N)
		{resize(__N, _Ty()); }
	void resize(size_type __N, _Ty __X)
		{if (size() < __N)
			insert(end(), __N - size(), __X);
		else if (__N < size())
			erase(begin() + __N, end()); }
	size_type size() const
		{return (_Size); }
	size_type max_size() const
		{return (_Alval.max_size()); }
	bool empty() const
		{return (size() == 0); }
	allocator_type get_allocator() const
		{return (_Alval); }
	const_reference at(size_type __P) const
		{if (size() <= __P)
			_Xran();
		return (*(begin() + __P)); }
	reference at(size_type __P)
		{if (size() <= __P)
			_Xran();
		return (*(begin() + __P)); }
	const_reference operator[](size_type __P) const
		{return (*(begin() + __P)); }
	reference operator[](size_type __P)
		{return (*(begin() + __P)); }
	reference front()
		{return (*begin()); }
	const_reference front() const
		{return (*begin()); }
	reference back()
		{return (*(end() - 1)); }
	const_reference back() const
		{return (*(end() - 1)); }
	void push_front(const _Ty& __X)
		{if (max_size() - 1 <= _Size)
			_Xlen();
		if (empty() || _First._Next == _First._First)
			_Buyfront();
		--_First;
		_TRY_BEGIN
		_Alval.construct(_First._Next, __X);
		_CATCH_ALL
		_Popfront();
		_RERAISE;
		_CATCH_END
		++_Size; }
	void pop_front()
		{if (!empty())
			{_Alval.destroy(_First._Next);
			_Popfront(); }}
	void push_back(const _Ty& __X)
		{if (max_size() - 1 <= _Size)
			_Xlen();
		if (empty() || _Last._Next == _Last._Last)
			_Buyback();
		++_Last;
		_TRY_BEGIN
		iterator __P = _Last - 1;
		_Alval.construct(__P._Next, __X);
		_CATCH_ALL
		_Popback();
		_RERAISE;
		_CATCH_END
		++_Size; }
	void pop_back()
		{if (!empty())
			{iterator __P = _Last - 1;
			_Alval.destroy(__P._Next);
			_Popback(); }}
	template<class _It>
		void assign(_It _F, _It __L)
		{_Assign(_F, __L, _Iter_cat(_F)); }
	template<class _It>
		void _Assign(_It _F, _It __L, _Int_iterator_tag)
		{assign((size_type)_F, (_Ty)__L); }
	template<class _It>
		void _Assign(_It _F, _It __L, input_iterator_tag)
		{erase(begin(), end());
		insert(begin(), _F, __L); }
	void assign(size_type __N, const _Ty& __X)
		{_Ty _Tx = __X;
		erase(begin(), end());
		insert(begin(), __N, _Tx); }
	iterator insert(iterator __P, const _Ty& __X)
		{if (__P == begin())
			{push_front(__X);
			return (begin()); }
		else if (__P == end())
			{push_back(__X);
			return (end() - 1); }
		else
			{iterator __S;
			size_type _Off = __P - begin();
			_Ty _Tx = __X;
			if (_Off < size() / 2)
				{push_front(front());
				__S = begin() + _Off;
				copy(begin() + 2, __S + 1, begin() + 1); }
			else
				{push_back(back());
				__S = begin() + _Off;
				copy_backward(__S, end() - 2, end() - 1); }
			*__S = _Tx;
			return (__S); }}
	void insert(iterator __P, size_type _M, const _Ty& __X)
		{iterator __S;
		size_type _I;
		size_type _Off = __P - begin();
		size_type _Rem = _Size - _Off;
		if (_Off < _Rem)
			if (_Off < _M)
				{for (_I = _M - _Off; 0 < _I; --_I)
					push_front(__X);
				for (_I = _Off; 0 < _I; --_I)
					push_front(begin()[_M - 1]);
				__S = begin() + _M;
				fill(__S, __S + _Off, __X); }
			else
				{for (_I = _M; 0 < _I; --_I)
					push_front(begin()[_M - 1]);
				__S = begin() + _M;
				_Ty _Tx = __X;
				copy(__S + _M, __S + _Off, __S);
				fill(begin() + _Off, __S + _Off, _Tx); }
		else
			if (_Rem < _M)
				{for (_I = _M - _Rem; 0 < _I; --_I)
					push_back(__X);
				for (_I = 0; _I < _Rem; ++_I)
					push_back(begin()[_Off + _I]);
				__S = begin() + _Off;
				fill(__S, __S + _Rem, __X); }
			else
				{for (_I = 0; _I < _M; ++_I)
					push_back(begin()[_Off + _Rem - _M + _I]);
				__S = begin() + _Off;
				_Ty _Tx = __X;
				copy_backward(__S, __S + _Rem - _M, __S + _Rem);
				fill(__S, __S + _M, _Tx); }}
	template<class _It>
		void insert(iterator __P, _It _F, _It __L)
		{_Insert(__P, _F, __L, _Iter_cat(_F)); }
	template<class _It>
		void _Insert(iterator __P, _It _F, _It __L,
			_Int_iterator_tag)
		{insert(__P, (size_type)_F, (_Ty)__L); }
	template<class _It>
		void _Insert(iterator __P, _It _F, _It __L,
			input_iterator_tag)
		{size_type _Off = __P - begin();
		for (; _F != __L; ++_F, ++_Off)
			insert(begin() + _Off, *_F); }
	template<class _It>
		void _Insert(iterator __P, _It _F, _It __L,
			bidirectional_iterator_tag)
		{size_type _M = 0;
		_Distance(_F, __L, _M);
		size_type _I;
		size_type _Off = __P - begin();
		size_type _Rem = _Size - _Off;
		if (_Off < _Rem)
			if (_Off < _M)
				{_It _Qx = _F;
				advance(_Qx, _M - _Off);
				for (_It _Q = _Qx; _F != _Q; )
					push_front(*--_Q);
				for (_I = _Off; 0 < _I; --_I)
					push_front(begin()[_M - 1]);
				copy(_Qx, __L, begin() + _M); }
			else
				{for (_I = _M; 0 < _I; --_I)
					push_front(begin()[_M - 1]);
				iterator __S = begin() + _M;
				copy(__S + _M, __S + _Off, __S);
				copy(_F, __L, begin() + _Off); }
		else
			if (_Rem < _M)
				{_It _Qx = _F;
				advance(_Qx, _Rem);
				for (_It _Q = _Qx; _Q != __L; ++_Q)
					push_back(*_Q);
				for (_I = 0; _I < _Rem; ++_I)
					push_back(begin()[_Off + _I]);
				copy(_F, _Qx, begin() + _Off); }
			else
				{for (_I = 0; _I < _M; ++_I)
					push_back(begin()[_Off + _Rem - _M + _I]);
				iterator __S = begin() + _Off;
				copy_backward(__S, __S + _Rem - _M, __S + _Rem);
				copy(_F, __L, __S); }}
	iterator erase(iterator __P)
		{return (erase(__P, __P + 1)); }
	iterator erase(iterator _F, iterator __L)
		{size_type __N = __L - _F;
		size_type _M = _F - begin();
		if (_M < end() - __L)
			{copy_backward(begin(), _F, __L);
			for (; 0 < __N; --__N)
				pop_front(); }
		else
			{copy(__L, end(), _F);
			for (; 0 < __N; --__N)
				pop_back(); }
		return (_M == 0 ? begin() : begin() + _M); }
	void clear()
		{erase(begin(), end()); }
	void swap(_Myt& __X)
		{if (_Alval == __X._Alval)
			{_STD swap(_First, __X._First);
			_STD swap(_Last, __X._Last);
			_STD swap(_Map, __X._Map);
			_STD swap(_Mapsize, __X._Mapsize);
			_STD swap(_Size, __X._Size); }
		else
			{_Myt _Ts = *this; *this = __X, __X = _Ts; }}
protected:
	void _Buyback()
		{_Tptr __P = _Alval.allocate(_DEQUESIZ, (void *)0);
		_TRY_BEGIN
		if (empty())
			{_Getmap(_DEQUEMAPSIZ);
			size_type __N = _Mapsize / 2;
			_Setptr(_Map + __N - 1, 0);
			_Setptr(_Map + __N, __P);
			_Setptr(_Map + __N + 1, 0);
			_First = iterator(__P + _DEQUESIZ / 2, _Map + __N);
			_Last = _First; }
		else if (_Last._Map < _Map + (_Mapsize - 2))
			{_Setptr(++_Last._Map, __P);
			_Setptr(_Last._Map + 1, 0);
			_Last = iterator(__P, _Last._Map); }
		else
			{difference_type _I = _Last._Map - _First._Map + 1;
			_Mapptr _M = _Growmap(2 * _I);
			_Setptr(_M + _I, __P);
			_Setptr(_M + _I + 1, 0);
			_First = iterator(_First._Next, _M);
			_Last = iterator(__P, _M + _I); }
		_CATCH_ALL
		_Alval.deallocate(__P, _DEQUESIZ);
		_RERAISE;
		_CATCH_END }
	void _Buyfront()
		{_Tptr __P = _Alval.allocate(_DEQUESIZ, (void *)0);
		_TRY_BEGIN
		if (empty())
			{_Getmap(_DEQUEMAPSIZ);
			size_type __N = _Mapsize / 2;
			_Setptr(_Map + __N - 1, 0);
			_Setptr(_Map + __N, __P);
			_Setptr(_Map + __N + 1, 0);
			_First = iterator(__P + (_DEQUESIZ / 2 + 1),
				_Map + __N);
			_Last = _First; }
		else if (_Map < _First._Map)
			{_Setptr(--_First._Map - 1, 0);
			_Setptr(_First._Map, __P);
			_First = iterator(__P + _DEQUESIZ, _First._Map); }
		else
			{difference_type _I = _Last._Map - _First._Map + 1;
			_Mapptr _M = _Growmap(2 * _I);
			_Setptr(--_M - 1, 0);
			_Setptr(_M, __P);
			_First = iterator(__P + _DEQUESIZ, _M);
			_Last = iterator(_Last._Next, _M + _I); }
		_CATCH_ALL
		_Alval.deallocate(__P, _DEQUESIZ);
		_RERAISE;
		_CATCH_END }
	void _Freelast()
		{_Freeptr(_First._Map - 1);
		_Freeptr(_First._Map);
		_Freeptr(_First._Map + 1);
		_First = iterator();
		_Last = _First;
		_Freemap(); }
	void _Popfront()
		{_Mapptr _M = _First._Map;
		++_First;
		--_Size;
		if (empty())
			_Freelast();
		else if (_M != _First._Map)
			{_Freeptr(_M - 1);
			_Setptr(_M, 0); }}
	void _Popback()
		{_Mapptr _M = _Last._Map;
		--_Last;
		--_Size;
		if (empty())
			_Freelast();
		else if (_M != _Last._Map)
			{_Setptr(_M, 0);
			_Freeptr(_M + 1); }}
	void _Xran() const
		{_THROW(out_of_range, "invalid deque<T> subscript"); }
	void _Freemap()
		{_Almap.deallocate(_Map, _Mapsize); }
	void _Freeptr(_Mapptr _M)
		{_Alval.deallocate(*_M, _DEQUESIZ);
		_Almap.destroy(_M); }
	void _Getmap(size_type _Newsize)
		{_Map = _Almap.allocate(_Newsize, (void *)0);
		_Mapsize = _Newsize; }
	_Mapptr _Growmap(size_type _Newsize)
		{_Mapptr _M = _Almap.allocate(_Newsize, (void *)0);
		_Mapptr _Mx = _M + _Newsize / 4 - 1;
		for (_Mapptr _Mo = _First._Map - 1;
			_Mo != _Last._Map + 2; ++_Mo, ++_Mx)
			{_Almap.construct(_Mx, *_Mo);
			_Almap.destroy(_Mo); }
		_Almap.deallocate(_Map, _Mapsize);
		_Map = _M;
		_Mapsize = _Newsize;
		return (_Mx + 1); }
	void _Setptr(_Mapptr _M, _Tptr __P)
		{_Almap.construct(_M, __P); }
	void _Xlen() const
		{_THROW(length_error, "deque<T> too long"); }
	iterator _First, _Last;
	_Mapptr _Map;
	size_type _Mapsize, _Size;
	};
		// deque TEMPLATE OPERATORS
template<class _Ty, class _A> inline
	void swap(deque<_Ty, _A>& __X, deque<_Ty, _A>& _Y)
	{__X.swap(_Y); }
template<class _Ty, class _A> inline
	bool operator==(const deque<_Ty, _A>& __X,
		const deque<_Ty, _A>& _Y)
	{return (__X.size() == _Y.size()
		&& equal(__X.begin(), __X.end(), _Y.begin())); }
template<class _Ty, class _A> inline
	bool operator!=(const deque<_Ty, _A>& __X,
		const deque<_Ty, _A>& _Y)
	{return (!(__X == _Y)); }
template<class _Ty, class _A> inline
	bool operator<(const deque<_Ty, _A>& __X,
		const deque<_Ty, _A>& _Y)
	{return (lexicographical_compare(__X.begin(), __X.end(),
		_Y.begin(), _Y.end())); }
template<class _Ty, class _A> inline
	bool operator<=(const deque<_Ty, _A>& __X,
		const deque<_Ty, _A>& _Y)
	{return (!(_Y < __X)); }
template<class _Ty, class _A> inline
	bool operator>(const deque<_Ty, _A>& __X,
		const deque<_Ty, _A>& _Y)
	{return (_Y < __X); }
template<class _Ty, class _A> inline
	bool operator>=(const deque<_Ty, _A>& __X,
		const deque<_Ty, _A>& _Y)
	{return (!(__X < _Y)); }
_STD_END


#endif /* _DEQUE_ */

/*
 * Copyright (c) 1995 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
V2.2:0414 */
