 /*(
 * The information  contained  herein is a trade secret of CAD-UL GmbH,
 * Ulm, Germany, and is confidential information. It is provided  under
 * a license agreement, and may be  copied or disclosed  only under the
 * terms of  that  agreement.  Any  reproduction or disclosure  of this
 * material  without  the express written  authorization of CAD-UL GmbH
 * or persuant to the license agreement is unlawful.
 *
 * Copyright (c) 1991-1998 CAD-UL GmbH
 * An unpublished work by CAD-UL GmbH, Germany
 * All rights reserved.
 *
 *
 * $Log: functional,v $
 * Revision 1.2  2000/02/08 06:20:44  pla
 * LIBCXX V210
 *
 * Revision 1.1  1998/05/04 14:43:01  aki
 * Initial revision
 *
 */ 

// functional standard header
#ifndef _FUNCTIONAL_
#define _FUNCTIONAL_


#include <xstddef>
_STD_BEGIN
		// TEMPLATE STRUCT unary_function
template<class _A, class _R>
	struct unary_function {
	typedef _A argument_type;
	typedef _R result_type;
	};
		// TEMPLATE STRUCT binary_function
template<class _A1, class _A2, class _R>
	struct binary_function {
	typedef _A1 first_argument_type;
	typedef _A2 second_argument_type;
	typedef _R result_type;
	};
		// TEMPLATE STRUCT plus
template<class _Ty>
	struct plus : binary_function<_Ty, _Ty, _Ty> {
	_Ty operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X + _Y); }
	};
		// TEMPLATE STRUCT minus
template<class _Ty>
	struct minus : binary_function<_Ty, _Ty, _Ty> {
	_Ty operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X - _Y); }
	};
		// TEMPLATE STRUCT multiplies
template<class _Ty>
	struct multiplies : binary_function<_Ty, _Ty, _Ty> {
	_Ty operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X * _Y); }
	};
		// TEMPLATE STRUCT divides
template<class _Ty>
	struct divides : binary_function<_Ty, _Ty, _Ty> {
	_Ty operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X / _Y); }
	};
		// TEMPLATE STRUCT modulus
template<class _Ty>
	struct modulus : binary_function<_Ty, _Ty, _Ty> {
	_Ty operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X % _Y); }
	};
		// TEMPLATE STRUCT negate
template<class _Ty>
	struct negate : unary_function<_Ty, _Ty> {
	_Ty operator()(const _Ty& __X) const
		{return (-__X); }
	};
		// TEMPLATE STRUCT equal_to
template<class _Ty>
	struct equal_to : binary_function<_Ty, _Ty, bool> {
	bool operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X == _Y); }
	};
		// TEMPLATE STRUCT not_equal_to
template<class _Ty>
	struct not_equal_to : binary_function<_Ty, _Ty, bool> {
	bool operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X != _Y); }
	};
		// TEMPLATE STRUCT greater
template<class _Ty>
	struct greater : binary_function<_Ty, _Ty, bool> {
	bool operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X > _Y); }
	};
		// TEMPLATE STRUCT less
template<class _Ty>
	struct less : binary_function<_Ty, _Ty, bool> {
	bool operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X < _Y); }
	};
		// TEMPLATE STRUCT greater_equal
template<class _Ty>
	struct greater_equal : binary_function<_Ty, _Ty, bool> {
	bool operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X >= _Y); }
	};
		// TEMPLATE STRUCT less_equal
template<class _Ty>
	struct less_equal : binary_function<_Ty, _Ty, bool> {
	bool operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X <= _Y); }
	};
		// TEMPLATE STRUCT logical_and
template<class _Ty>
	struct logical_and : binary_function<_Ty, _Ty, bool> {
	bool operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X && _Y); }
	};
		// TEMPLATE STRUCT logical_or
template<class _Ty>
	struct logical_or : binary_function<_Ty, _Ty, bool> {
	bool operator()(const _Ty& __X, const _Ty& _Y) const
		{return (__X || _Y); }
	};
		// TEMPLATE STRUCT logical_not
template<class _Ty>
	struct logical_not : unary_function<_Ty, bool> {
	bool operator()(const _Ty& __X) const
		{return (!__X); }
	};
		// TEMPLATE CLASS unary_negate
template<class _Ufn>
	class unary_negate
	: public unary_function<typename _Ufn::argument_type, bool> {
public:
	explicit unary_negate(const _Ufn& __X)
		: _Fn(__X) {}
	bool operator()(const typename _Ufn::argument_type& __X) const
		{return (!_Fn(__X)); }
protected:
	_Ufn _Fn;
	};
		// TEMPLATE FUNCTION not1
template<class _Ufn> inline
	unary_negate<_Ufn> not1(const _Ufn& __X)
		{return (unary_negate<_Ufn>(__X)); }
		// TEMPLATE CLASS binary_negate
template<class _Bfn>
	class binary_negate
	: public binary_function<typename _Bfn::first_argument_type,
		typename _Bfn::second_argument_type, bool> {
public:
	explicit binary_negate(const _Bfn& __X)
		: _Fn(__X) {}
	bool operator()(const typename _Bfn::first_argument_type& __X,
		const typename _Bfn::second_argument_type& _Y) const
		{return (!_Fn(__X, _Y)); }
protected:
	_Bfn _Fn;
	};
		// TEMPLATE FUNCTION not2
template<class _Bfn> inline
	binary_negate<_Bfn> not2(const _Bfn& __X)
		{return (binary_negate<_Bfn>(__X)); }
		// TEMPLATE CLASS binder1st
template<class _Bfn>
	class binder1st
	: public unary_function<typename _Bfn::second_argument_type,
		typename _Bfn::result_type> {
public:
	typedef unary_function<typename _Bfn::second_argument_type,
		typename _Bfn::result_type> _Base;
	typedef typename _Base::argument_type argument_type;
	typedef typename _Base::result_type result_type;
	binder1st(const _Bfn& __X,
		const typename _Bfn::first_argument_type& _Y)
		: op(__X), value(_Y) {}
	result_type operator()(const argument_type& __X) const
		{return (op(value, __X)); }
protected:
	_Bfn op;
	typename _Bfn::first_argument_type value;
	};
		// TEMPLATE FUNCTION bind1st
template<class _Bfn, class _Ty> inline
	binder1st<_Bfn> bind1st(const _Bfn& __X, const _Ty& _Y)
		{typename _Bfn::first_argument_type _Arg(_Y);
		return (binder1st<_Bfn>(__X, _Arg)); }
		// TEMPLATE CLASS binder2nd
template<class _Bfn>
	class binder2nd
	: public unary_function<typename _Bfn::first_argument_type,
		typename _Bfn::result_type> {
public:
	typedef unary_function<typename _Bfn::first_argument_type,
		typename _Bfn::result_type> _Base;
	typedef typename _Base::argument_type argument_type;
	typedef typename _Base::result_type result_type;
	binder2nd(const _Bfn& __X,
		const typename _Bfn::second_argument_type& _Y)
		: op(__X), value(_Y) {}
	result_type operator()(const argument_type& __X) const
		{return (op(__X, value)); }
protected:
	_Bfn op;
	typename _Bfn::second_argument_type value;
	};
		// TEMPLATE FUNCTION bind2nd
template<class _Bfn, class _Ty> inline
	binder2nd<_Bfn> bind2nd(const _Bfn& __X, const _Ty& _Y)
		{typename _Bfn::second_argument_type _Arg(_Y);
		return (binder2nd<_Bfn>(__X, _Arg)); }
		// TEMPLATE CLASS pointer_to_unary_function
template<class _A, class _R>
	class pointer_to_unary_function
		: public unary_function<_A, _R> {
public:
	explicit pointer_to_unary_function(_R (*__X)(_A))
		: _Fn(__X) {}
	_R operator()(_A __X) const
		{return (_Fn(__X)); }
protected:
	_R (*_Fn)(_A);
	};
		// TEMPLATE CLASS pointer_to_binary_function
template<class _A1, class _A2, class _R>
	class pointer_to_binary_function
		: public binary_function<_A1, _A2, _R> {
public:
	explicit pointer_to_binary_function(
		_R (*__X)(_A1, _A2))
		: _Fn(__X) {}
	_R operator()(_A1 __X, _A2 _Y) const
		{return (_Fn(__X, _Y)); }
protected:
	_R (*_Fn)(_A1, _A2);
	};
		// TEMPLATE FUNCTION ptr_fun
template<class _A, class _R> inline
	pointer_to_unary_function<_A, _R>
		ptr_fun(_R (*__X)(_A))
		{return (pointer_to_unary_function<_A, _R>(__X)); }
template<class _A1, class _A2, class _R> inline
	pointer_to_binary_function<_A1, _A2, _R>
		ptr_fun(_R (*__X)(_A1, _A2))
		{return (pointer_to_binary_function<_A1, _A2, _R>(__X)); }
		// TEMPLATE CLASS mem_fun_t
template<class _R, class _Ty>
	class mem_fun_t : public unary_function<_Ty *, _R> {
public:
	explicit mem_fun_t(_R (_Ty::*_Pm)())
		: _Ptr(_Pm) {}
	_R operator()(_Ty *__P) const
		{return ((__P->*_Ptr)()); }
private:
	_R (_Ty::*_Ptr)();
	};
		// TEMPLATE CLASS mem_fun1_t
template<class _R, class _Ty, class _A>
	class mem_fun1_t : public binary_function<_Ty *, _A, _R> {
public:
	explicit mem_fun1_t(_R (_Ty::*_Pm)(_A))
		: _Ptr(_Pm) {}
	_R operator()(_Ty *__P, _A _Arg) const
		{return ((__P->*_Ptr)(_Arg)); }
private:
	_R (_Ty::*_Ptr)(_A);
	};
		// TEMPLATE CLASS const_mem_fun_t
template<class _R, class _Ty>
	class const_mem_fun_t
		: public unary_function<const _Ty *, _R> {
public:
	explicit const_mem_fun_t(_R (_Ty::*_Pm)() const)
		: _Ptr(_Pm) {}
	_R operator()(const _Ty *__P) const
		{return ((__P->*_Ptr)()); }
private:
	_R (_Ty::*_Ptr)() const;
	};
		// TEMPLATE CLASS const_mem_fun1_t
template<class _R, class _Ty, class _A>
	class const_mem_fun1_t
		: public binary_function<_Ty *, _A, _R> {
public:
	explicit const_mem_fun1_t(_R (_Ty::*_Pm)(_A) const)
		: _Ptr(_Pm) {}
	_R operator()(const _Ty *__P, _A _Arg) const
		{return ((__P->*_Ptr)(_Arg)); }
private:
	_R (_Ty::*_Ptr)(_A) const;
	};
		// TEMPLATE FUNCTION mem_fun
template<class _R, class _Ty> inline
	mem_fun_t<_R, _Ty> mem_fun(_R (_Ty::*_Pm)())
	{return (mem_fun_t<_R, _Ty>(_Pm)); }
template<class _R, class _Ty, class _A> inline
	mem_fun1_t<_R, _Ty, _A> mem_fun(_R (_Ty::*_Pm)(_A))
	{return (mem_fun1_t<_R, _Ty, _A>(_Pm)); }
template<class _R, class _Ty> inline
	const_mem_fun_t<_R, _Ty>
		mem_fun(_R (_Ty::*_Pm)() const)
	{return (const_mem_fun_t<_R, _Ty>(_Pm)); }
template<class _R, class _Ty, class _A> inline
	const_mem_fun1_t<_R, _Ty, _A>
		mem_fun(_R (_Ty::*_Pm)(_A) const)
	{return (const_mem_fun1_t<_R, _Ty, _A>(_Pm)); }
		// TEMPLATE CLASS mem_fun_ref_t
template<class _R, class _Ty>
	class mem_fun_ref_t : public unary_function<_Ty, _R> {
public:
	explicit mem_fun_ref_t(_R (_Ty::*_Pm)())
		: _Ptr(_Pm) {}
	_R operator()(_Ty& __X) const
		{return ((__X.*_Ptr)()); }
private:
	_R (_Ty::*_Ptr)();
	};
		// TEMPLATE CLASS mem_fun1_ref_t
template<class _R, class _Ty, class _A>
	class mem_fun1_ref_t : public binary_function<_Ty, _A, _R> {
public:
	explicit mem_fun1_ref_t(_R (_Ty::*_Pm)(_A))
		: _Ptr(_Pm) {}
	_R operator()(_Ty& __X, _A _Arg) const
		{return ((__X.*_Ptr)(_Arg)); }
private:
	_R (_Ty::*_Ptr)(_A);
	};
		// TEMPLATE CLASS const_mem_fun_ref_t
template<class _R, class _Ty>
	class const_mem_fun_ref_t
		: public unary_function<_Ty, _R> {
public:
	explicit const_mem_fun_ref_t(_R (_Ty::*_Pm)() const)
		: _Ptr(_Pm) {}
	_R operator()(const _Ty& __X) const
		{return ((__X.*_Ptr)()); }
private:
	_R (_Ty::*_Ptr)() const;
	};
		// TEMPLATE CLASS const_mem_fun1_ref_t
template<class _R, class _Ty, class _A>
	class const_mem_fun1_ref_t
		: public binary_function<_Ty, _A, _R> {
public:
	explicit const_mem_fun1_ref_t(_R (_Ty::*_Pm)(_A) const)
		: _Ptr(_Pm) {}
	_R operator()(const _Ty& __X, _A _Arg) const
		{return ((__X.*_Ptr)(_Arg)); }
private:
	_R (_Ty::*_Ptr)(_A) const;
	};
		// TEMPLATE FUNCTION mem_fun_ref
template<class _R, class _Ty> inline
	mem_fun_ref_t<_R, _Ty> mem_fun_ref(_R (_Ty::*_Pm)())
	{return (mem_fun_ref_t<_R, _Ty>(_Pm)); }
template<class _R, class _Ty, class _A> inline
	mem_fun1_ref_t<_R, _Ty, _A>
		mem_fun_ref(_R (_Ty::*_Pm)(_A))
	{return (mem_fun1_ref_t<_R, _Ty, _A>(_Pm)); }
template<class _R, class _Ty> inline
	const_mem_fun_ref_t<_R, _Ty>
		mem_fun_ref(_R (_Ty::*_Pm)() const)
	{return (const_mem_fun_ref_t<_R, _Ty>(_Pm)); }
template<class _R, class _Ty, class _A> inline
	const_mem_fun1_ref_t<_R, _Ty, _A>
		mem_fun_ref(_R (_Ty::*_Pm)(_A) const)
	{return (const_mem_fun1_ref_t<_R, _Ty, _A>(_Pm)); }
_STD_END


#endif /* _FUNCTIONAL_ */

/*
 * Copyright (c) 1995 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
V2.2:0414 */
