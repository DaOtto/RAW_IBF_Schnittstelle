 /*(
 * The information  contained  herein is a trade secret of CAD-UL GmbH,
 * Ulm, Germany, and is confidential information. It is provided  under
 * a license agreement, and may be  copied or disclosed  only under the
 * terms of  that  agreement.  Any  reproduction or disclosure  of this
 * material  without  the express written  authorization of CAD-UL GmbH
 * or persuant to the license agreement is unlawful.
 *
 * Copyright (c) 1991-1998 CAD-UL GmbH
 * An unpublished work by CAD-UL GmbH, Germany
 * All rights reserved.
 *
 *
 * $Log: queue,v $
 * Revision 1.2  2000/02/08 06:21:05  pla
 * LIBCXX V210
 *
 * Revision 1.1  1998/05/04 14:43:04  aki
 * Initial revision
 *
 */ 

// queue standard header
#ifndef _QUEUE_
#define _QUEUE_


#include <algorithm>
#include <deque>
#include <functional>
#include <vector>
_STD_BEGIN
		// TEMPLATE CLASS queue
template<class _Ty, class __C = deque<_Ty> >
	class queue {
public:
	typedef __C container_type;
	typedef typename __C::value_type value_type;
	typedef typename __C::size_type size_type;
	queue()
		: c() {}
	explicit queue(const __C& _Cont)
		: c(_Cont) {}
	bool empty() const
		{return (c.empty()); }
	size_type size() const
		{return (c.size()); }
	value_type& front()
		{return (c.front()); }
	const value_type& front() const
		{return (c.front()); }
	value_type& back()
		{return (c.back()); }
	const value_type& back() const
		{return (c.back()); }
	void push(const value_type& __X)
		{c.push_back(__X); }
	void pop()
		{c.pop_front(); }
	bool _Eq(const queue<_Ty, __C>& __X) const
		{return (c == __X.c); }
	bool _Lt(const queue<_Ty, __C>& __X) const
		{return (c < __X.c); }
protected:
	__C c;
	};
		// queue TEMPLATE FUNCTIONS
template<class _Ty, class __C> inline
	bool operator==(const queue<_Ty, __C>& __X,
		const queue<_Ty, __C>& _Y)
	{return (__X._Eq(_Y)); }
template<class _Ty, class __C> inline
	bool operator!=(const queue<_Ty, __C>& __X,
		const queue<_Ty, __C>& _Y)
	{return (!(__X == _Y)); }
template<class _Ty, class __C> inline
	bool operator<(const queue<_Ty, __C>& __X,
		const queue<_Ty, __C>& _Y)
	{return (__X._Lt(_Y)); }
template<class _Ty, class __C> inline
	bool operator>(const queue<_Ty, __C>& __X,
		const queue<_Ty, __C>& _Y)
	{return (_Y < __X); }
template<class _Ty, class __C> inline
	bool operator<=(const queue<_Ty, __C>& __X,
		const queue<_Ty, __C>& _Y)
	{return (!(_Y < __X)); }
template<class _Ty, class __C> inline
	bool operator>=(const queue<_Ty, __C>& __X,
		const queue<_Ty, __C>& _Y)
	{return (!(__X < _Y)); }
		// TEMPLATE CLASS priority_queue
template<class _Ty, class __C = vector<_Ty>,
	class _Pr = less<typename __C::value_type> >
	class priority_queue {
public:
	typedef __C container_type;
	typedef typename __C::value_type value_type;
	typedef typename __C::size_type size_type;
	priority_queue()
		: c(), comp() {}
	explicit priority_queue(const _Pr& __X)
		: c(), comp(__X) {}
	priority_queue(const _Pr& __X, const __C& _Cont)
		: c(_Cont), comp(__X)
		{make_heap(c.begin(), c.end(), comp); }
	template<class _It>
		priority_queue(_It _F, _It __L)
		: c(_F, __L), comp()
		{make_heap(c.begin(), c.end(), comp); }
	template<class _It>
		priority_queue(_It _F, _It __L, const _Pr& __X)
		: c(_F, __L), comp(__X)
		{make_heap(c.begin(), c.end(), comp); }
	template<class _It>
		priority_queue(_It _F, _It __L, const _Pr& __X,
			const __C& _Cont)
		: c(_Cont), comp(__X)
		{c.insert(c.end(), _F, __L);
		make_heap(c.begin(), c.end(), comp); }
	bool empty() const
		{return (c.empty()); }
	size_type size() const
		{return (c.size()); }
	const value_type& top() const
		{return (c.front()); }
	void push(const value_type& __X)
		{c.push_back(__X);
		push_heap(c.begin(), c.end(), comp); }
	void pop()
		{pop_heap(c.begin(), c.end(), comp);
		c.pop_back(); }
protected:
	__C c;
	_Pr comp;
	};
_STD_END


#endif /* _QUEUE_ */

/*
 * Copyright (c) 1995 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
V2.2:0414 */
