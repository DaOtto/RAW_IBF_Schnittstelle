 /*(
 * The information  contained  herein is a trade secret of CAD-UL GmbH,
 * Ulm, Germany, and is confidential information. It is provided  under
 * a license agreement, and may be  copied or disclosed  only under the
 * terms of  that  agreement.  Any  reproduction or disclosure  of this
 * material  without  the express written  authorization of CAD-UL GmbH
 * or persuant to the license agreement is unlawful.
 *
 * Copyright (c) 1991-1998 CAD-UL GmbH
 * An unpublished work by CAD-UL GmbH, Germany
 * All rights reserved.
 *
 *
 * $Log: xmemory,v $
 * Revision 1.2  2000/02/08 06:21:07  pla
 * LIBCXX V210
 *
 * Revision 1.1  1998/05/04 14:43:06  aki
 * Initial revision
 *
 */ 

// xmemory internal header (from <memory>)
#ifndef _XMEMORY_
#define _XMEMORY_


#include <cstdlib>
#include <new>
#include <xutility>
#ifndef _FARQ	/* specify standard memory model */
 #define _FARQ
 #define _PDFT	ptrdiff_t
 #define _SIZT	size_t
#endif
 #define _CPOINTER_X(T, A)		\
	typename A::_TEMPLATE_MEMBER rebind<T>::other::const_pointer
 #define _CREFERENCE_X(T, A)	\
	typename A::_TEMPLATE_MEMBER rebind<T>::other::const_reference
 #define _POINTER_X(T, A)	\
	typename A::_TEMPLATE_MEMBER rebind<T>::other::pointer
 #define _REFERENCE_X(T, A)	\
	typename A::_TEMPLATE_MEMBER rebind<T>::other::reference
_STD_BEGIN
		// TEMPLATE FUNCTION _Allocate
template<class _Ty> inline
	_Ty _FARQ *_Allocate(_SIZT __N, _Ty _FARQ *)
	{return ((_Ty _FARQ *)operator new(__N * sizeof (_Ty))); }
		// TEMPLATE FUNCTION _Construct
template<class _T1, class _T2> inline
	void _Construct(_T1 _FARQ *__P, const _T2& _V)
	{new ((void _FARQ *)__P) _T1(_V); }
		// TEMPLATE FUNCTION _Destroy
template<class _Ty> inline
	void _Destroy(_Ty _FARQ *__P)
	{_DESTRUCTOR(_Ty, __P); }
template<> inline void _Destroy(char _FARQ *__P)
	{}
template<> inline void _Destroy(wchar_t _FARQ *__P)
	{}
		// TEMPLATE CLASS allocator
template<class _Ty>
	class allocator {
public:
	typedef _SIZT size_type;
	typedef _PDFT difference_type;
	typedef _Ty _FARQ *pointer;
	typedef const _Ty _FARQ *const_pointer;
	typedef _Ty _FARQ& reference;
	typedef const _Ty _FARQ& const_reference;
	typedef _Ty value_type;
	pointer address(reference __X) const
		{return (&__X); }
	const_pointer address(const_reference __X) const
		{return (&__X); }
	allocator()
		{}
	allocator(const allocator<_Ty>&)
		{}
	template<class __U>
		allocator(const allocator<__U>&)
		{}
	template<class __U>
		allocator<_Ty>& operator=(const allocator<__U>&)
		{return (*this); }
	template<class __U>
		struct rebind {
			typedef allocator<__U> other;
		};
	template<class __U>
		pointer allocate(size_type __N, const __U *)
		{return (_Allocate(__N, (pointer)0)); }
	pointer allocate(size_type __N)
		{return (_Allocate(__N, (pointer)0)); }
	void deallocate(pointer __P, size_type)
		{operator delete(__P); }
	void construct(pointer __P, const _Ty& _V)
		{_Construct(__P, _V); }
	void destroy(pointer __P)
		{_Destroy(__P); }
	_SIZT max_size() const
		{_SIZT __N = (_SIZT)(-1) / sizeof (_Ty);
		return (0 < __N ? __N : 1); }
	};
template<class _Ty, class __U> inline
	bool operator==(const allocator<_Ty>&, const allocator<__U>&)
	{return (true); }
template<class _Ty, class __U> inline
	bool operator!=(const allocator<_Ty>&, const allocator<__U>&)
	{return (false); }
		// CLASS allocator<void>
template<> class allocator<void> {
public:
	typedef void _Ty;
	typedef _Ty _FARQ *pointer;
	typedef const _Ty _FARQ *const_pointer;
	typedef _Ty value_type;
	allocator(const allocator<_Ty>&)
		{}
	template<class __U>
		allocator(const allocator<__U>&)
		{}
	template<class __U>
		allocator<_Ty>& operator=(const allocator<__U>&)
		{return (*this); }
	template<class __U>
		struct rebind {
			typedef allocator<__U> other;
		};
	};
_STD_END


#endif /* _XMEMORY_ */

/*
 * Copyright (c) 1995 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
V2.2:0414 */
