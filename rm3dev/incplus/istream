 /*(
 * The information  contained  herein is a trade secret of CAD-UL GmbH,
 * Ulm, Germany, and is confidential information. It is provided  under
 * a license agreement, and may be  copied or disclosed  only under the
 * terms of  that  agreement.  Any  reproduction or disclosure  of this
 * material  without  the express written  authorization of CAD-UL GmbH
 * or persuant to the license agreement is unlawful.
 *
 * Copyright (c) 1991-1998 CAD-UL GmbH
 * An unpublished work by CAD-UL GmbH, Germany
 * All rights reserved.
 *
 *
 * $Log: istream,v $
 * Revision 1.2  2000/02/08 06:20:45  pla
 * LIBCXX V210
 *
 * Revision 1.1  1998/05/04 14:43:02  aki
 * Initial revision
 *
 */ 

// istream standard header
#ifndef _ISTREAM_
#define _ISTREAM_

#pragma noarguments_in_registers(push)

#include <ostream>
_STD_BEGIN
		// CLASS istream
#if i8086 /* >> 4719DE1 >> */
#pragma       align   (istream=2)
#else
#pragma       align   (istream=4)             // 3055DE1
#endif /* << 4719DE1 << */
class istream: public ios {
public:
	typedef char _E;
	typedef char_traits _Tr;
	typedef istream _Myt;
	typedef ios _Myios;
	typedef streambuf _Mysb;
	typedef _Istrit _Iter;
	typedef ctype _Ctype;
	typedef num_get _Nget;
	explicit istream(_Mysb *__S, bool _Isstd = false)
		: _Chcount(0) {init(__S, _Isstd); }
	istream(_Uninitialized)
		{_Addstd(); }
	virtual ~istream()
		{}
	typedef _Tr::int_type int_type;
	typedef _Tr::pos_type pos_type;
	typedef _Tr::off_type off_type;
	class sentry {
	public:
		explicit sentry(_Myt& _Is, bool _Noskip = false)
                        /* 2008DE1 pass pointer _ios_sem to semaphore */
			: _Lk(_LOCK_STREAM,&_Is._ios_sem) /*,_Ok(_Is.ipfx(_Noskip)) */
			/* 2008DE1 the code is moved into the body to ensure, that
			 * the lock is performed before ipfx() is called.
			 */
			{_Ok = _Is.ipfx(_Noskip);}
		operator bool() const
			{return (_Ok); }
	private:
		sentry(const sentry&);	// not defined
		sentry& operator=(const sentry&);	// not defined
		bool _Ok;
		_Lockit _Lk;
		};
	bool ipfx(bool _Noskip = false)
		{if (ios_base::good())
			{if (_Myios::tie() != 0)
				_Myios::tie()->flush();
			if (!_Noskip && ios_base::flags() & ios_base::skipws)
				{const _Ctype& _Fac =
					_USE(ios_base::getloc(), _Ctype);
				_TRY_IO_BEGIN
				int_type __C = _Myios::rdbuf()->sgetc();
				for (; ; __C = _Myios::rdbuf()->snextc())
					if (_Tr::eq_int_type(_Tr::eof(), __C))
						{_Myios::setstate(ios_base::eofbit);
						break; }
					else if (!_Fac.is(_Ctype::space,
						_Tr::to_char_type(__C)))
						break;
				_CATCH_IO_END }
			if (ios_base::good())
				return (true); }
		_Myios::setstate(ios_base::failbit);
		return (false); }
	void isfx()
		{}
	_Myt& operator>>(_Myt& (*_F)(_Myt&))
		{return ((*_F)(*this)); }
	_Myt& operator>>(_Myios& (*_F)(_Myios&))
		{(*_F)(*(_Myios *)this);
		return (*this); }
	_Myt& operator>>(ios_base& (*_F)(ios_base&))
		{(*_F)(*(ios_base *)this);
		return (*this); }
	_Myt& operator>>(_Bool& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, __X);
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(short& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{long _Y;
			const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, _Y);
			_CATCH_IO_END
			if (_St & ios_base::failbit
				|| _Y < SHRT_MIN || SHRT_MAX < _Y)
				_St |= ios_base::failbit;
			else
				__X = _Y; }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(unsigned short& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, __X);
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(int& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{long _Y;
			const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, _Y);
			_CATCH_IO_END
			if (_St & ios_base::failbit
				|| _Y < INT_MIN || INT_MAX < _Y)
				_St |= ios_base::failbit;
			else
				__X = _Y; }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(unsigned int& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, __X);
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(long& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, __X);
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(unsigned long& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, __X);
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(float& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, __X);
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(double& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, __X);
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(long double& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, __X);
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(void *& __X)
		{ios_base::iostate _St = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{const _Nget& _Fac = _USE(ios_base::getloc(), _Nget);
			_TRY_IO_BEGIN
			_Fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _St, __X);
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& operator>>(_Mysb *_Pb)
		{ios_base::iostate _St = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);
		if (_Ok && _Pb != 0)
			{_TRY_IO_BEGIN
			int_type __C = _Myios::rdbuf()->sgetc();
			for (; ; __C = _Myios::rdbuf()->snextc())
				if (_Tr::eq_int_type(_Tr::eof(), __C))
					{_St |= ios_base::eofbit;
					break; }
				else
					{_TRY_BEGIN
						if (_Tr::eq_int_type(_Tr::eof(),
							_Pb->sputc(_Tr::to_char_type(__C))))
							break;
					_CATCH_ALL
						break;
					_CATCH_END
					_Copied = true; }
			_CATCH_IO_END }
		_Myios::setstate(!_Copied
			? _St | ios_base::failbit : _St);
		return (*this); }
	int_type get()
		{int_type __C;
		ios_base::iostate _St = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (!_Ok)
			__C = _Tr::eof();
		else
			{_TRY_IO_BEGIN
			__C = _Myios::rdbuf()->sbumpc();
			if (_Tr::eq_int_type(_Tr::eof(), __C))
				_St |= ios_base::eofbit | ios_base::failbit;
			else
				++_Chcount;
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (__C); }
	_Myt& get(_E *__S, streamsize __N)
		{return (get(__S, __N, _Myios::widen('\n'))); }
	_Myt& get(_E *__S, streamsize __N, _E _D)
		{ios_base::iostate _St = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok && 0 < __N)
			{_TRY_IO_BEGIN
			int_type __C = _Myios::rdbuf()->sgetc();
			for (; 0 < --__N; __C = _Myios::rdbuf()->snextc())
				if (_Tr::eq_int_type(_Tr::eof(), __C))
					{_St |= ios_base::eofbit;
					break; }
				else if (_Tr::to_char_type(__C) == _D)
					break;
				else
					*__S++ = _Tr::to_char_type(__C), ++_Chcount;
			_CATCH_IO_END }
		_Myios::setstate(_Chcount == 0
			? _St | ios_base::failbit : _St);
		*__S = _E();
		return (*this); }
	_Myt& get(_E& __X)
		{int_type __C = get();
		if (!_Tr::eq_int_type(_Tr::eof(), __C))
			__X = _Tr::to_char_type(__C);
		return (*this); }
	_Myt& get(_Mysb& _Sb)
		{return (get(_Sb, _Myios::widen('\n'))); }
	_Myt& get(_Mysb& _Sb, _E _D)
		{ios_base::iostate _St = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok)
			{_TRY_IO_BEGIN
			int_type __C = _Myios::rdbuf()->sgetc();
			for (; ; __C = _Myios::rdbuf()->snextc())
				if (_Tr::eq_int_type(_Tr::eof(), __C))
					{_St |= ios_base::eofbit;
					break; }
				else
					{_TRY_BEGIN
						_E _Ch = _Tr::to_char_type(__C);
						if (_Ch == _D
							|| _Tr::eq_int_type(_Tr::eof(),
								_Sb.sputc(_Ch)))
							break;
					_CATCH_ALL
						break;
					_CATCH_END
					++_Chcount; }
			_CATCH_IO_END }
		if (_Chcount == 0)
			_St |= ios_base::failbit;
		_Myios::setstate(_St);
		return (*this); }
	_Myt& getline(_E *__S, streamsize __N)
		{return (getline(__S, __N, _Myios::widen('\n'))); }
	_Myt& getline(_E *__S, streamsize __N, _E _D)
		{ios_base::iostate _St = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok && 0 < __N)
			{int_type _Di = _Tr::to_int_type(_D);
			_TRY_IO_BEGIN
			int_type __C = _Myios::rdbuf()->sgetc();
			for (; ; __C = _Myios::rdbuf()->snextc())
				if (_Tr::eq_int_type(_Tr::eof(), __C))
					{_St |= ios_base::eofbit;
					break; }
				else if (__C == _Di)
					{++_Chcount;
					_Myios::rdbuf()->sbumpc();
					break; }
				else if (--__N <= 0)
					{_St |= ios_base::failbit;
					break; }
				else
					{++_Chcount;
					*__S++ = _Tr::to_char_type(__C); }
			_CATCH_IO_END }
		*__S = _E();
		_Myios::setstate(_Chcount == 0
			? _St | ios_base::failbit : _St);
		return (*this); }
	_Myt& ignore(streamsize __N = 1, int_type _Di = _Tr::eof())
		{ios_base::iostate _St = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok && 0 < __N)
			{_TRY_IO_BEGIN
			for (; ; )
				{int_type __C;
				if (__N != INT_MAX && --__N < 0)
					break;
				else if (_Tr::eq_int_type(_Tr::eof(),
					__C = _Myios::rdbuf()->sbumpc()))
					{_St |= ios_base::eofbit;
					break; }
				else
					{++_Chcount;
					if (__C == _Di)
						break; }}
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& read(_E *__S, streamsize __N)
		{ios_base::iostate _St = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok)
			{_TRY_IO_BEGIN
			const streamsize _M = _Myios::rdbuf()->sgetn(__S, __N);
			_Chcount += _M;
			if (_M != __N)
				_St |= ios_base::eofbit | ios_base::failbit;
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	streamsize readsome(_E *__S, streamsize __N)
		{ios_base::iostate _St = ios_base::goodbit;
		_Chcount = 0;
		int _M;
		if (_Myios::rdbuf() == 0)
			_St |= ios_base::failbit;
		else if ((_M = _Myios::rdbuf()->in_avail()) < 0)
			_St |= ios_base::eofbit;
		else if (0 < _M)
			read(__S, _M < __N ? _M : __N);
		_Myios::setstate(_St);
		return (gcount()); }
	int_type peek()
		{ios_base::iostate _St = ios_base::goodbit;
		_Chcount = 0;
		int_type __C;
		const sentry _Ok(*this, true);
		if (!_Ok)
			__C = _Tr::eof();
		else
			{_TRY_IO_BEGIN
			if (_Tr::eq_int_type(_Tr::eof(),
				__C = _Myios::rdbuf()->sgetc()))
				_St |= ios_base::eofbit;
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (__C); }
	_Myt& putback(_E __X)
		{ios_base::iostate _St = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok)
			{_TRY_IO_BEGIN
			if (_Tr::eq_int_type(_Tr::eof(),
				_Myios::rdbuf()->sputbackc(__X)))
				_St |= ios_base::badbit;
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	_Myt& unget()
		{ios_base::iostate _St = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		if (_Ok)
			{_TRY_IO_BEGIN
			if (_Tr::eq_int_type(_Tr::eof(),
				_Myios::rdbuf()->sungetc()))
				_St |= ios_base::badbit;
			_CATCH_IO_END }
		_Myios::setstate(_St);
		return (*this); }
	streamsize gcount() const
		{return (_Chcount); }
	int sync()
		{ios_base::iostate _St = ios_base::goodbit;
		int _Ans;
		if (_Myios::rdbuf() == 0)
			_Ans = -1;
		else if (_Myios::rdbuf()->pubsync() == -1)
			_St |= ios_base::badbit, _Ans = -1;
		else
			_Ans = 0;
		_Myios::setstate(_St);
		return (_Ans); }
	_Myt& seekg(pos_type __P)
		{if (!ios_base::fail())
			_Myios::rdbuf()->pubseekpos(__P, ios_base::in);
		return (*this); }
	_Myt& seekg(off_type _O, ios_base::seekdir _W)
		{if (!ios_base::fail())
			_Myios::rdbuf()->pubseekoff(_O, _W, ios_base::in);
		return (*this); }
	pos_type tellg()
		{if (!ios_base::fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::in));
		else
			return (pos_type(_BADOFF)); }
private:
	streamsize _Chcount;

protected:
        /*
         * 2008DE1
         * If a stream is tied to another one, the semaphore must be
         * be shared.
         */
	void	tie_sem(void) {
		__cadul_share_critical_section_lock((void *)&_ios_sem,
					   (void *)&(tie()->_ios_sem));
	}
	};
		// EXTRACTORS
inline istream& operator>>(istream& _I, char *__X)
	{typedef char _E;
	typedef char_traits _Tr;
	typedef istream _Myis;
	typedef ctype _Ctype;
	ios_base::iostate _St = ios_base::goodbit;
	_E *__S = __X;
	const _Myis::sentry _Ok(_I);
	if (_Ok)
		{const _Ctype& _Fac = _USE(_I.getloc(), _Ctype);
		_TRY_IO_BEGIN
		int __N = 0 < _I.width() ? _I.width() : INT_MAX;
		_Myis::int_type __C = _I.rdbuf()->sgetc();
		for (; 0 < --__N; __C = _I.rdbuf()->snextc())
			if (_Tr::eq_int_type(_Tr::eof(), __C))
				{_St |= ios_base::eofbit;
				break; }
			else if (_Fac.is(_Ctype::space,
				_Tr::to_char_type(__C)))
				break;
			else
				*__S++ = _Tr::to_char_type(__C);
		_CATCH_IO_(_I) }
	*__S = _E();
	_I.width(0);
	_I.setstate(__S == __X ? _St | ios_base::failbit : _St);
	return (_I); }
inline istream& operator>>(istream& _I, char& __X)
	{typedef char _E;
	typedef char_traits _Tr;
	typedef istream _Myis;
	_Myis::int_type __C;
	ios_base::iostate _St = ios_base::goodbit;
	const _Myis::sentry _Ok(_I);
	if (_Ok)
		{_TRY_IO_BEGIN
		__C = _I.rdbuf()->sbumpc();
		if (_Tr::eq_int_type(_Tr::eof(), __C))
			_St |= ios_base::eofbit | ios_base::failbit;
		else
			__X = _Tr::to_char_type(__C);
		_CATCH_IO_(_I) }
	_I.setstate(_St);
	return (_I); }
inline istream& operator>>(istream& _I, signed char *__X)
	{return (_I >> (char *)__X); }
inline istream& operator>>(istream& _I, signed char& __C)
	{return (_I >> (char&)__C); }
inline istream& operator>>(istream& _I, unsigned char *__X)
	{return (_I >> (char *)__X); }
inline istream& operator>>(istream& _I, unsigned char& __C)
	{return (_I >> (char&)__C); }
		// MANIPULATORS
inline istream& ws(istream& _I)
	{typedef char _E;
	typedef char_traits _Tr;
	typedef istream _Myis;
	typedef ctype _Ctype;
	ios_base::iostate _St = ios_base::goodbit;
	const _Myis::sentry _Ok(_I, true);
	if (_Ok)
		{const _Ctype& _Fac = _USE(_I.getloc(), _Ctype);
		_TRY_IO_BEGIN
		for (_Tr::int_type __C = _I.rdbuf()->sgetc(); ;
			__C = _I.rdbuf()->snextc())
			if (_Tr::eq_int_type(_Tr::eof(), __C))
				{_St |= ios_base::eofbit;
				break; }
			else if (!_Fac.is(_Ctype::space,
				_Tr::to_char_type(__C)))
				break;
		_CATCH_IO_(_I) }
	_I.setstate(_St);
	return (_I); }
_STD_END

#pragma arguments_in_registers(pop)

#endif /* _ISTREAM_ */

/*
 * Copyright (c) 1994 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
V2.2:0414 */
