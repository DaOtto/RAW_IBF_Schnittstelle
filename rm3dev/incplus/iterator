 /*(
 * The information  contained  herein is a trade secret of CAD-UL GmbH,
 * Ulm, Germany, and is confidential information. It is provided  under
 * a license agreement, and may be  copied or disclosed  only under the
 * terms of  that  agreement.  Any  reproduction or disclosure  of this
 * material  without  the express written  authorization of CAD-UL GmbH
 * or persuant to the license agreement is unlawful.
 *
 * Copyright (c) 1991-1998 CAD-UL GmbH
 * An unpublished work by CAD-UL GmbH, Germany
 * All rights reserved.
 *
 *
 * $Log: iterator,v $
 * Revision 1.2  2000/02/08 06:20:45  pla
 * LIBCXX V210
 *
 * Revision 1.1  1998/05/04 14:43:02  aki
 * Initial revision
 *
 */ 

// iterator standard header
#ifndef _ITERATOR_
#define _ITERATOR_


#include <xutility>
_STD_BEGIN
		// TEMPLATE CLASS back_insert_iterator
template<class __C>
	class back_insert_iterator
		: public _Outit {
public:
	typedef __C container_type;
	typedef typename __C::reference reference;
	typedef typename __C::value_type value_type;
	explicit back_insert_iterator(__C& __X)
		: container(&__X) {}
	back_insert_iterator<__C>& operator=(
		typename __C::const_reference _V)
		{container->push_back(_V);
		return (*this); }
	back_insert_iterator<__C>& operator*()
		{return (*this); }
	back_insert_iterator<__C>& operator++()
		{return (*this); }
	back_insert_iterator<__C> operator++(int)
		{return (*this); }
protected:
	__C *container;
	};
template<class __C> inline
	back_insert_iterator<__C> back_inserter(__C& __X)
	{return (back_insert_iterator<__C>(__X)); }
		// TEMPLATE CLASS front_insert_iterator
template<class __C>
	class front_insert_iterator
		: public _Outit {
public:
	typedef __C container_type;
	typedef typename __C::reference reference;
	typedef typename __C::value_type value_type;
	explicit front_insert_iterator(__C& __X)
		: container(&__X) {}
	front_insert_iterator<__C>& operator=(
		typename __C::const_reference _V)
		{container->push_front(_V);
		return (*this); }
	front_insert_iterator<__C>& operator*()
		{return (*this); }
	front_insert_iterator<__C>& operator++()
		{return (*this); }
	front_insert_iterator<__C> operator++(int)
		{return (*this); }
protected:
	__C *container;
	};
template<class __C> inline
	front_insert_iterator<__C> front_inserter(__C& __X)
	{return (front_insert_iterator<__C>(__X)); }
		// TEMPLATE CLASS insert_iterator
template<class __C>
	class insert_iterator
		: public _Outit {
public:
	typedef __C container_type;
	typedef typename __C::reference reference;
	typedef typename __C::value_type value_type;
	insert_iterator(__C& __X, typename __C::iterator _I)
		: container(&__X), iter(_I) {}
	insert_iterator<__C>& operator=(
		typename __C::const_reference _V)
		{iter = container->insert(iter, _V);
		++iter;
		return (*this); }
	insert_iterator<__C>& operator*()
		{return (*this); }
	insert_iterator<__C>& operator++()
		{return (*this); }
	insert_iterator<__C>& operator++(int)
		{return (*this); }
protected:
	__C *container;
	typename __C::iterator iter;
	};
template<class __C, class _XI> inline
	insert_iterator<__C> inserter(__C& __X, _XI _I)
	{return (insert_iterator<__C>(__X, __C::iterator(_I))); }
		// TEMPLATE CLASS istream_iterator
template<class _Ty, class _E = char,
	class _Tr = char_traits,
	class _Dist = ptrdiff_t>
	class istream_iterator
		: public iterator<input_iterator_tag, _Ty, _Dist,
			_Ty *, _Ty&> {
public:
	typedef istream_iterator<_Ty, _E, _Tr, _Dist> _Myt;
	typedef _E char_type;
	typedef _Tr traits_type;
	typedef istream istream_type;
	istream_iterator()
		: _Istr(0) {}
	istream_iterator(istream_type& _I)
		: _Istr(&_I) {_Getval(); }
	const _Ty& operator*() const
		{return (_Val); }
	_Myt& operator++()
		{_Getval();
		return (*this); }
	_Myt operator++(int)
		{_Myt _Tmp = *this;
		_Getval();
		return (_Tmp); }
	bool _Equal(const _Myt& __X) const
		{return (_Istr == __X._Istr); }
protected:
	void _Getval()
		{if (_Istr != 0 && !(*_Istr >> _Val))
			_Istr = 0; }
	istream_type *_Istr;
	_Ty _Val;
	};
template<class _Ty, class _E, class _Tr, class _Dist> inline
	bool operator==(
		const istream_iterator<_Ty, _E, _Tr, _Dist>& __X,
		const istream_iterator<_Ty, _E, _Tr, _Dist>& _Y)
	{return (__X._Equal(_Y)); }
template<class _Ty, class _E, class _Tr, class _Dist> inline
	bool operator!=(
		const istream_iterator<_Ty, _E, _Tr, _Dist>& __X,
		const istream_iterator<_Ty, _E, _Tr, _Dist>& _Y)
	{return (!(__X == _Y)); }
		// TEMPLATE CLASS ostream_iterator
template<class _Ty, class _E = char,
	class _Tr = char_traits >
	class ostream_iterator
		: public _Outit {
public:
	typedef _Ty value_type;
	typedef _E char_type;
	typedef _Tr traits_type;
	typedef ostream ostream_type;
	ostream_iterator(ostream_type& _O,
		const _E *_D = 0)
		: _Ostr(&_O), _Delim(_D) {}
	ostream_iterator<_Ty, _E, _Tr>& operator=(const _Ty& __X)
		{*_Ostr << __X;
		if (_Delim != 0)
			*_Ostr << _Delim;
		return (*this); }
	ostream_iterator<_Ty, _E, _Tr>& operator*()
		{return (*this); }
	ostream_iterator<_Ty, _E, _Tr>& operator++()
		{return (*this); }
	ostream_iterator<_Ty, _E, _Tr> operator++(int)
		{return (*this); }
protected:
	const _E *_Delim;
	ostream_type *_Ostr;
	};
		// TEMPLATE FUNCTION _Val_type
template<class __C, class _Ty, class _D,
	class _Pt, class _Rt> inline
	_Ty *_Val_type(const iterator<__C, _Ty, _D, _Pt, _Rt>&)
	{return ((_Ty *)0); }
template<class _Ty> inline
	_Ty *_Val_type(const _Ty *)
	{return ((_Ty *)0); }
		// TEMPLATE FUNCTION advance
template<class _II, class _D> inline
	void advance(_II& _I, _D __N)
	{_Advance(_I, __N, _Iter_cat(_I)); }
template<class _II, class _D> inline
	void _Advance(_II& _I, _D __N, input_iterator_tag)
	{for (; 0 < __N; --__N)
		++_I; }
template<class _FI, class _D> inline
	void _Advance(_FI& _I, _D __N, forward_iterator_tag)
	{for (; 0 < __N; --__N)
		++_I; }
template<class _BI, class _D> inline
	void _Advance(_BI& _I, _D __N, bidirectional_iterator_tag)
	{for (; 0 < __N; --__N)
		++_I;
	for (; __N < 0; ++__N)
		--_I; }
template<class _RI, class _D> inline
	void _Advance(_RI& _I, _D __N, random_access_iterator_tag)
	{_I += __N; }
		// TEMPLATE FUNCTION _Dist_type
template<class __C, class _Ty, class _D,
	class _Pt, class _Rt> inline
	_D *_Dist_type(const iterator<__C, _Ty, _D, _Pt, _Rt>&)
	{return ((_D *)0); }
template<class _Ty> inline
	ptrdiff_t *_Dist_type(const _Ty *)
	{return ((ptrdiff_t *)0); }
_STD_END


#endif /* _ITERATOR_ */

/*
 * Copyright (c) 1995 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
V2.2:0414 */
