 /*(
 * The information  contained  herein is a trade secret of CAD-UL GmbH,
 * Ulm, Germany, and is confidential information. It is provided  under
 * a license agreement, and may be  copied or disclosed  only under the
 * terms of  that  agreement.  Any  reproduction or disclosure  of this
 * material  without  the express written  authorization of CAD-UL GmbH
 * or persuant to the license agreement is unlawful.
 *
 * Copyright (c) 1991-1998 CAD-UL GmbH
 * An unpublished work by CAD-UL GmbH, Germany
 * All rights reserved.
 *
 *
 * $Log: utility,v $
 * Revision 1.2  2000/02/08 06:21:06  pla
 * LIBCXX V210
 *
 * Revision 1.1  1998/05/04 14:43:05  aki
 * Initial revision
 *
 */ 

// utility standard header
#ifndef _UTILITY_
#define _UTILITY_


#include <iosfwd>
_STD_BEGIN
		// TEMPLATE STRUCT pair
template<class _T1, class _T2> struct pair {
	typedef _T1 first_type;
	typedef _T2 second_type;
	pair()
		: first(_T1()), second(_T2()) {}
	pair(const _T1& _V1, const _T2& _V2)
		: first(_V1), second(_V2) {}
	template<class _U1, class _U2>
		pair(const pair<_U1, _U2>& __X)
		: first(__X.first), second(__X.second) {}
	_T1 first;
	_T2 second;
	};
template<class _T1, class _T2> inline
	bool operator==(const pair<_T1, _T2>& __X,
		const pair<_T1, _T2>& _Y)
	{return (__X.first == _Y.first && __X.second == _Y.second); }
template<class _T1, class _T2> inline
	bool operator!=(const pair<_T1, _T2>& __X,
		const pair<_T1, _T2>& _Y)
	{return (!(__X == _Y)); }
template<class _T1, class _T2> inline
	bool operator<(const pair<_T1, _T2>& __X,
		const pair<_T1, _T2>& _Y)
	{return (__X.first < _Y.first ||
		!(_Y.first < __X.first) && __X.second < _Y.second); }
template<class _T1, class _T2> inline
	bool operator>(const pair<_T1, _T2>& __X,
		const pair<_T1, _T2>& _Y)
	{return (_Y < __X); }
template<class _T1, class _T2> inline
	bool operator<=(const pair<_T1, _T2>& __X,
		const pair<_T1, _T2>& _Y)
	{return (!(_Y < __X)); }
template<class _T1, class _T2> inline
	bool operator>=(const pair<_T1, _T2>& __X,
		const pair<_T1, _T2>& _Y)
	{return (!(__X < _Y)); }
template<class _T1, class _T2> inline
	pair<_T1, _T2> make_pair(const _T1& __X, const _T2& _Y)
	{return (pair<_T1, _T2>(__X, _Y)); }
 #if _HAS_NAMESPACE
		// TEMPLATE OPERATORS
	namespace rel_ops {
template<class _Ty> inline
	bool operator!=(const _Ty& __X, const _Ty& _Y)
	{return (!(__X == _Y)); }
template<class _Ty> inline
	bool operator>(const _Ty& __X, const _Ty& _Y)
	{return (_Y < __X); }
template<class _Ty> inline
	bool operator<=(const _Ty& __X, const _Ty& _Y)
	{return (!(_Y < __X)); }
template<class _Ty> inline
	bool operator>=(const _Ty& __X, const _Ty& _Y)
	{return (!(__X < _Y)); }
	_STD_END
 #else
 #endif
_STD_END


#endif /* _UTILITY_ */

/*
 * Copyright (c) 1995 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
V2.2:0414 */
