 /*(
 * The information  contained  herein is a trade secret of CAD-UL GmbH,
 * Ulm, Germany, and is confidential information. It is provided  under
 * a license agreement, and may be  copied or disclosed  only under the
 * terms of  that  agreement.  Any  reproduction or disclosure  of this
 * material  without  the express written  authorization of CAD-UL GmbH
 * or persuant to the license agreement is unlawful.
 *
 * Copyright (c) 1991-1998 CAD-UL GmbH
 * An unpublished work by CAD-UL GmbH, Germany
 * All rights reserved.
 *
 *
 * $Log: vector,v $
 * Revision 1.2  2000/02/08 06:21:07  pla
 * LIBCXX V210
 *
 * Revision 1.1  1998/05/04 14:43:05  aki
 * Initial revision
 *
 */ 

// vector standard header
#ifndef _VECTOR_
#define _VECTOR_


#include <iterator>
#include <memory>
#include <stdexcept>
_STD_BEGIN

		// TEMPLATE CLASS _Vector_val
template<class _Ty, class _A>
	class _Vector_val {
protected:
	_Vector_val(_A _Al = _A())
		: _Alval(_Al) {}
	typedef typename _A::_TEMPLATE_MEMBER
		rebind<_Ty>::other _Alty;
	_Alty _Alval;
	};

		// TEMPLATE CLASS vector
template<class _Ty, class _Ax = allocator<_Ty> >
	class vector : public _Vector_val<_Ty, _Ax> {
public:
	typedef vector<_Ty, _Ax> _Myt;
	typedef _Vector_val<_Ty, _Ax> _Mybase;
	typedef typename _Mybase::_Alty _A;
	typedef _A allocator_type;
	typedef typename _A::size_type size_type;
	typedef typename _A::difference_type difference_type;
	typedef typename _A::pointer _Tptr;
	typedef typename _A::const_pointer _Ctptr;
	typedef _Tptr pointer;
	typedef _Ctptr const_pointer;
	typedef typename _A::reference reference;
	typedef typename _A::const_reference const_reference;
	typedef typename _A::value_type value_type;
	typedef _Ptrit<value_type, difference_type, _Tptr,
		reference, _Tptr, reference> iterator;
	typedef _Ptrit<value_type, difference_type, _Ctptr,
		const_reference, _Tptr, reference> const_iterator;
	typedef _STD reverse_iterator<iterator>
		reverse_iterator;
	typedef _STD reverse_iterator<const_iterator>
		const_reverse_iterator;
	vector()
		: _Mybase()
		{_Buy(0); }
	explicit vector(const _A& _Al)
		: _Mybase(_Al)
		{_Buy(0); }
	explicit vector(size_type __N)
		: _Mybase()
		{if (_Buy(__N))
			_Last = _Ufill(_First, __N, _Ty()); }
	vector(size_type __N, const _Ty& _V)
		: _Mybase()
		{if (_Buy(__N))
			_Last = _Ufill(_First, __N, _V); }
	vector(size_type __N, const _Ty& _V, const _A& _Al)
		: _Mybase(_Al)
		{if (_Buy(__N))
			_Last = _Ufill(_First, __N, _V); }
	vector(const _Myt& __X)
		: _Mybase(__X._Alval)
		{if (_Buy(__X.size()))
			_Last = _Ucopy(__X.begin(), __X.end(), _First); }
	template<class _It>
		vector(_It _F, _It __L)
		: _Mybase()
		{_Construct(_F, __L, _Iter_cat(_F)); }
	template<class _It>
		vector(_It _F, _It __L, const _A& _Al)
		: _Mybase(_Al)
		{_Construct(_F, __L, _Iter_cat(_F)); }
	template<class _It>
		void _Construct(_It _F, _It __L, _Int_iterator_tag)
		{size_type __N = (size_type)_F;
		if (_Buy(__N))
			_Last = _Ufill(_First, __N, (_Ty)__L); }
	template<class _It>
		void _Construct(_It _F, _It __L, input_iterator_tag)
		{_Buy(0);
		insert(begin(), _F, __L); }
	~vector()
		{_Clear(); }
	_Myt& operator=(const _Myt& __X)
		{if (this == &__X)
			;
		else if (__X.size() == 0)
			{_Clear(); }
		else if (__X.size() <= size())
			{pointer _Q = copy(__X.begin(), __X.end(), _First);
			_Destroy(_Q, _Last);
			_Last = _First + __X.size(); }
		else if (__X.size() <= capacity())
			{const_iterator __S = __X.begin() + size();
			copy(__X.begin(), __S, _First);
			_Last = _Ucopy(__S, __X.end(), _Last); }
		else
			{_Destroy(_First, _Last);
			_Alval.deallocate(_First, _End - _First);
			if (_Buy(__X.size()))
				_Last = _Ucopy(__X.begin(), __X.end(), _First); }
		return (*this); }
	void reserve(size_type __N)
		{if (max_size() < __N)
			_Xlen();
		else if (capacity() < __N)
			{pointer _Q = _Alval.allocate(__N, (void *)0);
			_TRY_BEGIN
			_Ucopy(begin(), end(), _Q);
			_CATCH_ALL
			_Alval.deallocate(_Q, __N);
			_RERAISE;
			_CATCH_END
			if (_First != 0)
				{_Destroy(_First, _Last);
				_Alval.deallocate(_First, _End - _First); }
			_End = _Q + __N;
			_Last = _Q + size();
			_First = _Q; }}
	size_type capacity() const
		{return (_First == 0 ? 0 : _End - _First); }
	iterator begin()
		{return (iterator(_First)); }
	const_iterator begin() const
		{return (const_iterator(_First)); }
	iterator end()
		{return (iterator(_Last)); }
	const_iterator end() const
		{return (const_iterator(_Last)); }
	reverse_iterator rbegin()
		{return (reverse_iterator(end())); }
	const_reverse_iterator rbegin() const
		{return (const_reverse_iterator(end())); }
	reverse_iterator rend()
		{return (reverse_iterator(begin())); }
	const_reverse_iterator rend() const
		{return (const_reverse_iterator(begin())); }
	void resize(size_type __N)
		{resize(__N, _Ty()); }
	void resize(size_type __N, _Ty __X)
		{if (size() < __N)
			insert(end(), __N - size(), __X);
		else if (__N < size())
			erase(begin() + __N, end()); }
	size_type size() const
		{return (_First == 0 ? 0 : _Last - _First); }
	size_type max_size() const
		{return (_Alval.max_size()); }
	bool empty() const
		{return (size() == 0); }
	_A get_allocator() const
		{return (_Alval); }
	const_reference at(size_type __P) const
		{if (size() <= __P)
			_Xran();
		return (*(begin() + __P)); }
	reference at(size_type __P)
		{if (size() <= __P)
			_Xran();
		return (*(begin() + __P)); }
	const_reference operator[](size_type __P) const
		{return (*(begin() + __P)); }
	reference operator[](size_type __P)
		{return (*(begin() + __P)); }
	reference front()
		{return (*begin()); }
	const_reference front() const
		{return (*begin()); }
	reference back()
		{return (*(end() - 1)); }
	const_reference back() const
		{return (*(end() - 1)); }
	void push_back(const _Ty& __X)
		{insert(end(), __X); }
	void pop_back()
		{erase(end() - 1); }
	template<class _It>
		void assign(_It _F, _It __L)
		{_Assign(_F, __L, _Iter_cat(_F)); }
	template<class _It>
		void _Assign(_It _F, _It __L, _Int_iterator_tag)
		{assign((size_type)_F, (_Ty)__L); }
	template<class _It>
		void _Assign(_It _F, _It __L, input_iterator_tag)
		{erase(begin(), end());
		insert(begin(), _F, __L); }
	void assign(size_type __N, const _Ty& __X)
		{_Ty _Tx = __X;
		erase(begin(), end());
		insert(begin(), __N, _Tx); }
	iterator insert(iterator __P, const _Ty& __X)
		{size_type _Off = size() == 0 ? 0 : __P - begin();
		insert(__P, (size_type)1, __X);
		return (begin() + _Off); }
	void insert(iterator __P, size_type _M, const _Ty& __X)
		{_Ty _Tx = __X;
		size_type __N = capacity();
		if (_M == 0)
			;
		else if (max_size() - size() < _M)
			_Xlen();
		else if (__N < size() + _M)
			{__N = max_size() - __N < __N ? 0 : __N + __N;
			if (__N < size() + _M)
				__N = size() + _M;
			pointer __S = _Alval.allocate(__N, (void *)0);
			pointer _Q;
			_TRY_BEGIN
			_Q = _Ucopy(begin(), __P, __S);
			_Q = _Ufill(_Q, _M, _Tx);
			_Ucopy(__P, end(), _Q);
			_CATCH_ALL
			_Destroy(__S, _Q);
			_Alval.deallocate(__S, __N);
			_RERAISE;
			_CATCH_END
			if (_First != 0)
				{_Destroy(_First, _Last);
				_Alval.deallocate(_First, _End - _First); }
			_End = __S + __N;
			_Last = __S + size() + _M;
			_First = __S; }
		else if (end() - __P < _M)
			{_Ucopy(__P, end(), &*__P + _M);
			_TRY_BEGIN
			_Ufill(_Last, _M - (end() - __P), _Tx);
			_CATCH_ALL
			_Destroy(&*__P + _M, _Last + _M);
			_RERAISE;
			_CATCH_END
			_Last += _M;
			fill(__P, end() - _M, _Tx); }
		else
			{iterator _Oend = end();
			_Last = _Ucopy(_Oend - _M, _Oend, _Last);
			copy_backward(__P, _Oend - _M, _Oend);
			fill(__P, __P + _M, _Tx); }}
	template<class _It>
		void insert(iterator __P, _It _F, _It __L)
		{_Insert(__P, _F, __L, _Iter_cat(_F)); }
	template<class _It>
		void _Insert(iterator __P, _It _F, _It __L,
			_Int_iterator_tag)
		{insert(__P, (size_type)_F, (_Ty)__L); }
	template<class _It>
		void _Insert(iterator __P, _It _F, _It __L,
			input_iterator_tag)
		{for (; _F != __L; ++_F, ++__P)
			__P = insert(__P, *_F); }
	template<class _It>
		void _Insert(iterator __P, _It _F, _It __L,
			forward_iterator_tag)
		{size_type _M = 0;
		_Distance(_F, __L, _M);
		size_type __N = capacity();
		if (_M == 0)
			;
		else if (max_size() - size() < _M)
			_Xlen();
		else if (__N < size() + _M)
			{__N = max_size() - __N < __N ? 0 : __N + __N;
			if (__N < size() + _M)
				__N = size() + _M;
			pointer __S = _Alval.allocate(__N, (void *)0);
			pointer _Q;
			_TRY_BEGIN
			_Q = _Ucopy(begin(), __P, __S);
			_Q = _Ucopy(_F, __L, _Q);
			_Ucopy(__P, end(), _Q);
			_CATCH_ALL
			_Destroy(__S, _Q);
			_Alval.deallocate(__S, __N);
			_RERAISE;
			_CATCH_END
			if (_First != 0)
				{_Destroy(_First, _Last);
				_Alval.deallocate(_First, _End - _First); }
			_End = __S + __N;
			_Last = __S + size() + _M;
			_First = __S; }
		else if (end() - __P < _M)
			{_Ucopy(__P, end(), &*__P + _M);
			_It _Mid = _F;
			advance(_Mid, end() - __P);
			_TRY_BEGIN
			_Ucopy(_Mid, __L, _Last);
			_CATCH_ALL
			_Destroy(&*__P + _M, _Last + _M);
			_RERAISE;
			_CATCH_END
			_Last += _M;
			copy(_F, _Mid, __P); }
		else if (0 < _M)
			{iterator _Oend = end();
			_Last = _Ucopy(_Oend - _M, _Oend, _Last);
			copy_backward(__P, _Oend - _M, _Oend);
			copy(_F, __L, __P); }}
	iterator erase(iterator __P)
		{copy(__P + 1, end(), __P);
		_Destroy(_Last - 1, _Last);
		--_Last;
		return (__P); }
	iterator erase(iterator _F, iterator __L)
		{if (_F != __L)
			{pointer __S = copy(__L, end(), &*_F);
			_Destroy(__S, _Last);
			_Last = __S; }
		return (_F); }
	void clear()
		{erase(begin(), end()); }
	bool _Eq(const _Myt& __X) const
		{return (size() == __X.size()
			&& equal(begin(), end(), __X.begin())); }
	bool _Lt(const _Myt& __X) const
		{return (lexicographical_compare(begin(), end(),
			__X.begin(), __X.end())); }
	void swap(_Myt& __X)
		{if (_Alval == __X._Alval)
			{_STD swap(_First, __X._First);
			_STD swap(_Last, __X._Last);
			_STD swap(_End, __X._End); }
		else
			{_Myt _Ts = *this; *this = __X, __X = _Ts; }}
protected:
	bool _Buy(size_type __N)
		{_First = 0, _Last = 0, _End = 0;
		if (__N == 0)
			return (false);
		else
			{_First = _Alval.allocate(__N, (void *)0);
			_Last = _First;
			_End = _First + __N;
			return (true); }}
	void _Clear()
		{if (_First != 0)
			{_Destroy(_First, _Last);
			_Alval.deallocate(_First, _End - _First); }
		_First = 0, _Last = 0, _End = 0; }
	void _Destroy(pointer _F, pointer __L)
		{for (; _F != __L; ++_F)
			_Alval.destroy(_F); }
	template<class _It>
	pointer _Ucopy(_It _F, _It __L, pointer _Q)
		{pointer _Qs = _Q;
		_TRY_BEGIN
		for (; _F != __L; ++_Q, ++_F)
			_Alval.construct(_Q, *_F);
		_CATCH_ALL
		_Destroy(_Qs, _Q);
		_RERAISE;
		_CATCH_END
		return (_Q); }
	pointer _Ufill(pointer _Q, size_type __N, const _Ty &__X)
		{pointer _Qs = _Q;
		_TRY_BEGIN
		for (; 0 < __N; --__N, ++_Q)
			_Alval.construct(_Q, __X);
		_CATCH_ALL
		_Destroy(_Qs, _Q);
		_RERAISE;
		_CATCH_END
		return (_Q); }
	void _Xlen() const
		{_THROW(length_error, "vector<T> too long"); }
	void _Xran() const
		{_THROW(out_of_range, "invalid vector<T> subscript"); }
	pointer _First, _Last, _End;
	};
		// vector TEMPLATE FUNCTIONS
template<class _Ty, class _A> inline
	bool operator==(const vector<_Ty, _A>& __X,
		const vector<_Ty, _A>& _Y)
	{return (__X._Eq(_Y)); }
template<class _Ty, class _A> inline
	bool operator!=(const vector<_Ty, _A>& __X,
		const vector<_Ty, _A>& _Y)
	{return (!(__X == _Y)); }
template<class _Ty, class _A> inline
	bool operator<(const vector<_Ty, _A>& __X,
		const vector<_Ty, _A>& _Y)
	{return (__X._Lt(_Y)); }
template<class _Ty, class _A> inline
	bool operator>(const vector<_Ty, _A>& __X,
		const vector<_Ty, _A>& _Y)
	{return (_Y < __X); }
template<class _Ty, class _A> inline
	bool operator<=(const vector<_Ty, _A>& __X,
		const vector<_Ty, _A>& _Y)
	{return (!(_Y < __X)); }
template<class _Ty, class _A> inline
	bool operator>=(const vector<_Ty, _A>& __X,
		const vector<_Ty, _A>& _Y)
	{return (!(__X < _Y)); }
template<class _Ty, class _A> inline
	void swap(vector<_Ty, _A>& __X, vector<_Ty, _A>& _Y)
	{__X.swap(_Y); }

		// CLASS vector<_Bool, allocator>
typedef unsigned int _Vbase;
const int _VBITS = 8 * sizeof (_Vbase);	// 8 ==> CHAR_BIT
typedef allocator<_Vbase> _Bool_allocator;
template<> class vector<_Bool, _Bool_allocator> {
public:
	typedef _Bool_allocator _A;
	typedef _A::size_type size_type;
	typedef _A::difference_type _Dift;
	typedef _STD vector<_Vbase, _A> _Vbtype;
	typedef _STD vector<_Bool, _A> _Myt;
	typedef _Dift difference_type;
	typedef _Bool _Ty;
	typedef _A allocator_type;
		// CLASS reference
	class reference {
	public:
		reference()
			: _Mask(0), _Ptr(0) {}
		reference(size_t _Off, _Vbase *__P)
			: _Mask((_Vbase)1 << _Off), _Ptr(__P) {}
		reference& operator=(const reference& __X)
			{return (*this = bool(__X)); }
		reference& operator=(bool _V)
			{if (_V)
				*_Ptr |= _Mask;
			else
				*_Ptr &= ~_Mask;
			return (*this); }
		void flip()
			{*_Ptr ^= _Mask; }
		bool operator~() const
			{return (!bool(*this)); }
		operator bool() const
			{return ((*_Ptr & _Mask) != 0); }
	protected:
		_Vbase _Mask, *_Ptr;
		};
	typedef reference _Reft;
	typedef bool const_reference;
	typedef bool value_type;
		// CLASS iterator
	class const_iterator;
	class iterator
		: public _Ranit<_Bool, _Dift, _Reft *, _Reft> {
	public:
		typedef _Ranit<_Bool, _Dift, _Reft *, _Reft> _Mybase;
		typedef _Mybase::iterator_category
			iterator_category;
		typedef _Mybase::value_type value_type;
		typedef _Mybase::difference_type
			difference_type;
		typedef _Mybase::pointer pointer;
		typedef _Mybase::reference reference;
		friend class const_iterator;
		iterator()
			: _Off(0), _Ptr(0) {}
		iterator(size_t _O, _Vbtype::iterator __P)
			: _Off(_O), _Ptr(__P.base()) {}
		reference operator*() const
			{return (_Reft(_Off, _Ptr)); }
		iterator& operator++()
			{_Inc();
			return (*this); }
		iterator operator++(int)
			{iterator _Tmp = *this;
			_Inc();
			return (_Tmp); }
		iterator& operator--()
			{_Dec();
			return (*this); }
		iterator operator--(int)
			{iterator _Tmp = *this;
			_Dec();
			return (_Tmp); }
		iterator& operator+=(difference_type __N)
			{_Off += __N;
			_Ptr += _Off / _VBITS;
			_Off %= _VBITS;
			return (*this); }
		iterator& operator-=(difference_type __N)
			{return (*this += -__N); }
		iterator operator+(difference_type __N) const
			{iterator _Tmp = *this;
			return (_Tmp += __N); }
		iterator operator-(difference_type __N) const
			{iterator _Tmp = *this;
			return (_Tmp -= __N); }
		difference_type operator-(const iterator __X) const
			{return (_VBITS * (_Ptr - __X._Ptr)
				+ (difference_type)_Off
				- (difference_type)__X._Off); }
		reference operator[](difference_type __N) const
			{return (*(*this + __N)); }
		bool operator==(const iterator& __X) const
			{return (_Ptr == __X._Ptr && _Off == __X._Off); }
		bool operator!=(const iterator& __X) const
			{return (!(*this == __X)); }
		bool operator<(const iterator& __X) const
			{return (_Ptr < __X._Ptr
				|| _Ptr == __X._Ptr && _Off < __X._Off); }
		bool operator>(const iterator& __X) const
			{return (__X < *this); }
		bool operator<=(const iterator& __X) const
			{return (!(__X < *this)); }
		bool operator>=(const iterator& __X) const
			{return (!(*this < __X)); }
	protected:
		void _Dec()
			{if (_Off != 0)
				--_Off;
			else
				_Off = _VBITS - 1, --_Ptr; }
		void _Inc()
			{if (_Off < _VBITS - 1)
				++_Off;
			else
				_Off = 0, ++_Ptr; }
		size_t _Off;
		_Vbase *_Ptr;
		};
	typedef iterator _Myit;
		// CLASS const_iterator
	class const_iterator : public _Ranit<_Bool, _Dift,
		const_reference *, const_reference> {
	public:
		typedef _Ranit<_Bool, _Dift,
			const_reference *, const_reference> _Mybase;
		typedef _Mybase::iterator_category
			iterator_category;
		typedef _Mybase::value_type value_type;
		typedef _Mybase::difference_type
			difference_type;
		typedef _Mybase::pointer pointer;
		typedef _Mybase::reference reference;
		const_iterator()
			: _Off(0), _Ptr(0) {}
		const_iterator(size_t _O, _Vbtype::const_iterator __P)
			: _Off(_O), _Ptr(__P.base()) {}
		const_iterator(const _Myit& __X)
			: _Off(__X._Off), _Ptr(__X._Ptr) {}
		const_reference operator*() const
			{return (_Reft(_Off, (_Vbase *)_Ptr)); }
		const_iterator& operator++()
			{_Inc();
			return (*this); }
		const_iterator operator++(int)
			{const_iterator _Tmp = *this;
			_Inc();
			return (_Tmp); }
		const_iterator& operator--()
			{_Dec();
			return (*this); }
		const_iterator operator--(int)
			{const_iterator _Tmp = *this;
			_Dec();
			return (_Tmp); }
		const_iterator& operator+=(difference_type __N)
			{_Off += __N;
			_Ptr += _Off / _VBITS;
			_Off %= _VBITS;
			return (*this); }
		const_iterator& operator-=(difference_type __N)
			{return (*this += -__N); }
		const_iterator operator+(difference_type __N) const
			{const_iterator _Tmp = *this;
			return (_Tmp += __N); }
		const_iterator operator-(difference_type __N) const
			{const_iterator _Tmp = *this;
			return (_Tmp -= __N); }
		difference_type operator-(const const_iterator __X) const
			{return (_VBITS * (_Ptr - __X._Ptr)
				+ (difference_type)_Off
				- (difference_type)__X._Off); }
		const_reference operator[](difference_type __N) const
			{return (*(*this + __N)); }
		bool operator==(const const_iterator& __X) const
			{return (_Ptr == __X._Ptr && _Off == __X._Off); }
		bool operator!=(const const_iterator& __X) const
			{return (!(*this == __X)); }
		bool operator<(const const_iterator& __X) const
			{return (_Ptr < __X._Ptr
				|| _Ptr == __X._Ptr && _Off < __X._Off); }
		bool operator>(const const_iterator& __X) const
			{return (__X < *this); }
		bool operator<=(const const_iterator& __X) const
			{return (!(__X < *this)); }
		bool operator>=(const const_iterator& __X) const
			{return (!(*this < __X)); }
	protected:
		void _Dec()
			{if (_Off != 0)
				--_Off;
			else
				_Off = _VBITS - 1, --_Ptr; }
		void _Inc()
			{if (_Off < _VBITS - 1)
				++_Off;
			else
				_Off = 0, ++_Ptr; }
		size_t _Off;
		const _Vbase *_Ptr;
		};
	typedef iterator pointer;
	typedef const_iterator const_pointer;
	typedef _STD reverse_iterator<iterator>
		reverse_iterator;
	typedef _STD reverse_iterator<const_iterator>
		const_reverse_iterator;
	vector()
		: _Size(0), _Vec() {}
	explicit vector(const _A& _Al)
		: _Size(0), _Vec(_Al) {}
	explicit vector(size_type __N, const bool _V = false)
		: _Size(0), _Vec(_Nw(__N), _V ? -1 : 0)
		{_Trim(__N); }
	vector(size_type __N, const bool _V, const _A& _Al)
		: _Size(0), _Vec(_Nw(__N), _V ? -1 : 0, _Al)
		{_Trim(__N); }
	template<class _It>
		vector(_It _F, _It __L)
		: _Size(0), _Vec()
		{_BConstruct(_F, __L, _Iter_cat(_F)); }
	template<class _It>
		vector(_It _F, _It __L, const _A& _Al)
		: _Size(0), _Vec(_Al)
		{_BConstruct(_F, __L, _Iter_cat(_F)); }
	template<class _It>
		void _BConstruct(_It _F, _It __L, _Int_iterator_tag)
		{size_type __N = (size_type)_F;
		_Vec.assign(__N, (_Ty)__L ? -1 : 0);
		_Trim(__N); }
	template<class _It>
		void _BConstruct(_It _F, _It __L, input_iterator_tag)
		{insert(begin(), _F, __L); }
	~vector()
		{_Size = 0; }
	void reserve(size_type __N)
		{_Vec.reserve(_Nw(__N)); }
	size_type capacity() const
		{return (_Vec.capacity() * _VBITS); }
	iterator begin()
		{return (iterator(0, _Vec.begin())); }
	const_iterator begin() const
		{return (const_iterator(0, _Vec.begin())); }
	iterator end()
		{iterator _Tmp = begin();
		if (0 < _Size)
			_Tmp += _Size;
		return (_Tmp); }
	const_iterator end() const
		{const_iterator _Tmp = begin();
		if (0 < _Size)
			_Tmp += _Size;
		return (_Tmp); }
	reverse_iterator rbegin()
		{return (reverse_iterator(end())); }
	const_reverse_iterator rbegin() const
		{return (const_reverse_iterator(end())); }
	reverse_iterator rend()
		{return (reverse_iterator(begin())); }
	const_reverse_iterator rend() const
		{return (const_reverse_iterator(begin())); }
	void resize(size_type __N, bool __X = false)
		{if (size() < __N)
			insert(end(), __N - size(), __X);
		else if (__N < size())
			erase(begin() + __N, end()); }
	size_type size() const
		{return (_Size); }
	size_type max_size() const
		{return (_Vec.max_size() * _VBITS); }
	bool empty() const
		{return (size() == 0); }
	_A get_allocator() const
		{return (_Vec.get_allocator()); }
	const_reference at(size_type __P) const
		{if (size() <= __P)
			_Xran();
		return (*(begin() + __P)); }
	reference at(size_type __P)
		{if (size() <= __P)
			_Xran();
		return (*(begin() + __P)); }
	const_reference operator[](size_type __P) const
		{return (*(begin() + __P)); }
	reference operator[](size_type __P)
		{return (*(begin() + __P)); }
	reference front()
		{return (*begin()); }
	const_reference front() const
		{return (*begin()); }
	reference back()
		{return (*(end() - 1)); }
	const_reference back() const
		{return (*(end() - 1)); }
	void push_back(const bool __X)
		{insert(end(), __X); }
	void pop_back()
		{erase(end() - 1); }
	template<class _It>
		void assign(_It _F, _It __L)
		{_Assign(_F, __L, _Iter_cat(_F)); }
	template<class _It>
		void _Assign(_It _F, _It __L, _Int_iterator_tag)
		{assign((size_type)_F, (_Ty)__L); }
	template<class _It>
		void _Assign(_It _F, _It __L, input_iterator_tag)
		{erase(begin(), end());
		insert(begin(), _F, __L); }
	void assign(size_type __N, const _Ty& __X)
		{_Ty _Tx = __X;
		erase(begin(), end());
		insert(begin(), __N, _Tx); }
	iterator insert(iterator __P, const bool __X)
		{size_type _Off = __P - begin();
		insert(__P, (size_type)1, __X);
		return (begin() + _Off); }
	void insert(iterator __P, size_type _M, const bool __X)
		{if (_M == 0)
			;
		else if (max_size() - size() < _M)
			_Xlen();
		else
			{if (size() + _M <= capacity())
				;
			else if (size() == 0)
				{_Vec.resize(_Nw(size() + _M), 0);
				__P = begin(); }
			else
				{size_type _Off = __P - begin();
				_Vec.resize(_Nw(size() + _M), 0);
				__P = begin() + _Off;
				copy_backward(__P, end(), end() + _M); }
			fill(__P, __P + _M, __X);
			_Size += _M; }}
	template<class _It>
		void insert(iterator __P, _It _F, _It __L)
		{_Insert(__P, _F, __L, _Iter_cat(_F)); }
	template<class _It>
		void _Insert(iterator __P, _It _F, _It __L,
			_Int_iterator_tag)
		{insert(__P, (size_type)_F, (_Ty)__L); }
	template<class _It>
		void _Insert(iterator __P, _It _F, _It __L,
			input_iterator_tag)
		{size_type _Off = __P - begin();
		for (; _F != __L; ++_F, ++_Off)
			insert(begin() + _Off, *_F); }
	template<class _It>
		void _Insert(iterator __P, _It _F, _It __L,
			forward_iterator_tag)
		{size_type _M = 0;
		_Distance(_F, __L, _M);
		if (_M == 0)
			;
		else if (max_size() - size() < _M)
			_Xlen();
		else
			{if (size() + _M <= capacity())
				;
			else if (size() == 0)
				{_Vec.resize(_Nw(size() + _M), 0);
				__P = begin(); }
			else
				{size_type _Off = __P - begin();
				_Vec.resize(_Nw(size() + _M), 0);
				__P = begin() + _Off;
				copy_backward(__P, end(), end() + _M); }
			copy(_F, __L, __P);
			_Size += _M; }}
	iterator erase(iterator __P)
		{copy(__P + 1, end(), __P);
		_Trim(_Size - 1);
		return (__P); }
	iterator erase(iterator _F, iterator __L)
		{iterator __S = copy(__L, end(), _F);
		_Trim(__S - begin());
		return (_F); }
	void clear()
		{erase(begin(), end()); }
	void flip()
		{for (_Vbtype::iterator __S = _Vec.begin();
			__S != _Vec.end(); ++__S)
			*__S = ~*__S;
		_Trim(_Size); }
	bool _Eq(const _Myt& __X) const
		{return (_Size == __X._Size && _Vec == __X._Vec); }
	bool _Lt(const _Myt& __X) const
		{return (lexicographical_compare(begin(), end(),
			__X.begin(), __X.end())); }
	void swap(_Myt& __X)
		{_STD swap(_Size, __X._Size);
		_Vec.swap(__X._Vec); }
	static void swap(reference __X, reference _Y)
		{bool _V = __X;
		__X = _Y;
		_Y = _V; }
protected:
	static size_type _Nw(size_type __N)
		{return ((__N + _VBITS - 1) / _VBITS); }
	void _Trim(size_type __N)
		{if (size() < __N && max_size() <= __N)
			_Xlen();
		size_type _M = _Nw(__N);
		if (_M < _Vec.size())
			_Vec.erase(_Vec.begin() + _M, _Vec.end());
		_Size = __N;
		__N %= _VBITS;
		if (0 < __N)
			_Vec[_M - 1] &= ((_Vbase)1 << __N) - 1; }
	void _Xlen() const
		{_THROW(out_of_range, "vector<bool> too long"); }
	void _Xran() const
		{_THROW(out_of_range, "invalid vector<bool> subscript"); }
	size_type _Size;
	_Vbtype _Vec;
	};
typedef vector<_Bool, _Bool_allocator> _Bvector;
_STD_END


#endif /* _VECTOR_ */

/*
 * Copyright (c) 1995 by P.J. Plauger.  ALL RIGHTS RESERVED. 
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
V2.2:0414 */
