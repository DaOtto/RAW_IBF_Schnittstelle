/*--FILE HEADER----------------------------------------------------------------
;
;   filename    : STDIO.H
;   version     : 0016a
;   contents    : Header file for RMOS-CRUN
;   author      : P.F.
;   date        : Dec 06, 1996
;
;---FUNCTION AND RMOS ENVIRONMENT----------------------------------------------
;
;   function    : This is the header file for the standard I/O package.
;
;   RMOS2 & RMOS3
;
;---END OF FILE HEADER---------------------------------------------------------
;
;---MODIFICATION HEADER--------------------------------------------------------
;
;   Dec 19, 1994  P.F.  0016  Modification for RMOS2/3 V3.1
;   Dec 06, 1996  P.F.  0016a Error corrected at alignment of FILE
;
;---END OF MODIFICATION HEADER-----------------------------------------------*/

#ifndef _STDIO_H_
#define _STDIO_H_

#ifndef _RMCOMP_H_
#include <rmcomp.h>
#endif  /* _RMCOMP_H_ */

#if defined(_ARCHITECTURE_)  ||  defined(CADUL)
           /* ======= Intel C Compiler iC86/386 is used ======= */
           /* ======= CADUL C Compiler CC86/386 is used ======= */
#pragma fixedparams("fopen","fduopen", "freopen", "tmpfile", "ftell", "rewind")
#pragma fixedparams("setbuf", "fread", "fwrite", "fgetc", "ungetc")
#pragma fixedparams("fseek", "fflush", "setvbuf", "fclose", "fgetpos")
#pragma fixedparams("fsetpos", "_getc", "_putc", "puts", "fputs", "fputc")
#pragma fixedparams("putw", "rename", "remove", "gets", "fgets", "tmpnam")
#pragma fixedparams("_xstream", "getw", "fdureopen")
#pragma varparams("fprintf", "fscanf", "printf", "scanf", "sprintf", "sscanf")
#pragma varparams("vprintf", "vfprintf", "vsprintf")
#pragma varparams("perror")
#pragma varparams("x_cr_flushall")
#endif  /* _ARCHITECTURE_ || CADUL */


#ifndef _STDDEF_H_
#include <stddef.h>
#endif  /* _STDDEF_H_ */
#ifndef _STDARG_H_
#include <stdarg.h>
#endif  /* _STDARG_H_ */
#ifndef _STDIODEP_H_
#include <stdiodep.h>
#endif  /* _STDIODEP_H_ */


/* These three defines are used in the temporary file routines. */
#define P_tmpdir    ""
#define L_tmpnam    156
#define TMP_MAX     1000  /* Number of unique file names generated by tmpnam */


/* The following FILE typedef defines the central data structure used
   by the standard IO package to represent an open file.  Files
   represented by this type of structure are called "streams". 
*/
#if defined(_ARCHITECTURE_)  ||  defined(CADUL)
#if (_ARCHITECTURE_>=386) || defined (i386)
#pragma align (_file = 4)
#else
#pragma align (_file = 2)
#endif
#endif  /* _ARCHITECTURE_ || CADUL */

#if defined _MSC_VER
#pragma pack(2)
#endif  /* _MSC_VER */

#if defined __BORLANDC__
#pragma option -a
#endif

typedef struct _file {
    size_t         _cnt;        /* number of byte locations in buffer 
                                   from the current location to the end */
    unsigned char  *_bufpos;    /* current location in buffer */
#if RMFLAT
    unsigned short _bufpos_fill;/* Fill word, selector not used in flat model */
#endif
    unsigned char  *_bufbas;    /* pointer to start of buffer */
#if RMFLAT
    unsigned short _bufbas_fill;/* Fill word, selector not used in flat model */
#endif
    unsigned char  *_bufungetc; /* current location in buffer prior to any ungetc */
#if RMFLAT
    unsigned short _bufungetc_fill;/* Fill word, selector not used in flat model */
#endif
    int            _flag;       /* bit string of "open mode" flags */
    size_t         _bufsiz;     /* length of buffer in bytes */
    fid_t          _fid;        /* file id info */
    int            device;      /* -1  : filesystem related stream
                                   else: rio related stream: device */
    int            unit;        /* if device is rio related, here is the unit*/
} FILE;

#if defined _MSC_VER
#pragma pack()
#endif

#if defined __BORLANDC__
#pragma option -a.
#endif


/* The first three slots of the _stream table are initialized to
   represent the process's three "pre-opened" streams -- standard
   input, standard output, and standard error.  The three "defines"
   below define the associated stream pointers.
*/

#define stdin     (_xstream(0))  /* ptr to the standard input stream */
#define stdout    (_xstream(1))  /* ptr to the standard output stream */
#define stderr    (_xstream(2))  /* ptr to the standard error stream */


/* The flags below are used to describe a stream.  They are or'd
   together in the _flag field of the FILE structure for a stream.

   In addition to serving as flags, _IONBF, _IOLBF, and _IOFBF are
   used as arguments to setvbuf.

   The "current" operation for a stream is either READ, WRITE, or undefined.
   If a stream is opened read-only ("r") then the current operation is
   always READ.  If a stream is opened write-only ("w", "a") then the current
   operation is always WRITE.  If a stream is opened in an update mode
   ("r+", "w+", "a+") then the current operation can vary.  A stream
   opened in an update mode can be flushed (fflush) only if the current
   operation is WRITE.  Similarly, a character can be pushed back
   onto the stream buffer (ungetc) only if the current operation is READ.   
*/
#define _IOFBF    0x0000    /* Full buffering */
#define _IOLBF    0x0001    /* Line buffering */
#define _IONBF    0x0002    /* No buffer (unbuffered) */
#define _STDUBUF  0x0004    /* User allocated buffer */
#define _STDREAD  0x0008    /* Current operation is READ */
#define _STDWRITE 0x0010    /* Current operation is WRITE */     
#define _STDEOF   0x0020    /* End of File */
#define _STDERR   0x0040    /* I/O error */
#define _STDRW    0x0080    /* An update mode (Read-write) */
#define _STDTEMP  0x0100    /* Temporary stream */
#define _STDTEXT  0x0200    /* Stream in text mode */

#define clearerr(p) ((void) ((p)->_flag &= ~(_STDERR | _STDEOF)))
#define feof(p)     ((p)->_flag & _STDEOF)
#define ferror(p)   ((p)->_flag & _STDERR)
#define getc(p)     ((p)->_cnt == 0 || (p)->_flag & _IOLBF || \
                    (p)->_flag & _IONBF ? \
                    _getc(p) : (--(p)->_cnt, ((p)->_bufungetc = \
                    ((((p)->_bufungetc) && ((p)->_bufungetc + 1 > \
                    (p)->_bufpos)) ? NULL : (p)->_bufungetc)), \
                    (int) *(p)->_bufpos++))

#define putc(x, p)  ((p)->_cnt == 0  || (p)->_flag & _IOLBF || \
                    (p)->_flag & _IONBF ? \
                    _putc((unsigned char) (x), (p)) : \
                    (--(p)->_cnt, \
                    (int) (*(p)->_bufpos++ = (unsigned char) (x))))

#define getchar()   getc(stdin)
#define putchar(x)  putc((x), stdout)


/* These three defines can be used as final argument to fseek. */
#define SEEK_SET  0  /* seek relative to start of stream */
#define SEEK_CUR  1  /* seek relative to current position in stream */
#define SEEK_END  2  /* seek relative to end of stream */


#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

extern int    _FIXED _FAR fclose    (FILE *stream);
extern FILE * _FIXED _FAR fduopen   (unsigned int device, unsigned int unit, const char *mode);
extern FILE * _FIXED _FAR fdureopen (unsigned device, unsigned unit, const char *mode, FILE *ostream);
extern int    _FIXED _FAR fflush    (FILE *stream);
extern int    _FIXED _FAR fgetc     (FILE *stream);
extern int    _FIXED _FAR fgetpos   (FILE *stream, fpos_t *pos);
extern char * _FIXED _FAR fgets     (char *s, int n, FILE *stream);
extern FILE * _FIXED _FAR fopen     (const char *filename, const char *mode);
extern int    _VAR   _FAR fprintf   (FILE *stream, const char *fmtstr,...);
extern int    _FIXED _FAR fputc     (int c, FILE *stream);
extern int    _FIXED _FAR fputs     (const char *s, FILE *stream);
extern size_t _FIXED _FAR fread     (void *ptr, size_t size, size_t nmemb, FILE *stream);
extern FILE * _FIXED _FAR freopen   (const char *filename, const char *mode, FILE *stream);
extern int    _VAR   _FAR fscanf    (FILE *stream, const char *fmtptr,...);
extern int    _FIXED _FAR fseek     (FILE *stream, long offset, int ptofref);
extern int    _FIXED _FAR fsetpos   (FILE *stream, const fpos_t *pos);
extern long   _FIXED _FAR ftell     (FILE *stream);
extern size_t _FIXED _FAR fwrite    (const void *ptr, size_t size, size_t nmemb, FILE *stream);
extern char * _FIXED _FAR gets      (char *s);
extern int    _FIXED _FAR getw      (FILE *stream);
extern void   _VAR   _FAR perror    (const char *s);
extern int    _VAR   _FAR printf    (const char *fmtstr,...);
extern int    _FIXED _FAR puts      (const char *s);
extern int    _FIXED _FAR putw      (int w, FILE *stream);
extern int    _FIXED _FAR remove    (const char *filename);
extern int    _FIXED _FAR rename    (const char *oldname, const char *newname);
extern void   _FIXED _FAR rewind    (FILE *stream);
extern int    _VAR   _FAR scanf     (const char *fmtstr,...);
extern void   _FIXED _FAR setbuf    (FILE *stream, char *buf);
extern int    _FIXED _FAR setvbuf   (FILE *stream, char *buf, int mode, size_t size);
extern int    _VAR   _FAR sprintf   (char *s, const char *fmtstr,...);
extern int    _VAR   _FAR sscanf    (const char *s, const char *fmtptr,...);
extern FILE * _FIXED _FAR tmpfile   (void );
extern char * _FIXED _FAR tmpnam    (char *s);
extern int    _FIXED _FAR ungetc    (int c, FILE *stream);
extern int    _VAR   _FAR vfprintf  (FILE *stream, const char *fmtstr, va_list ap);
extern int    _VAR   _FAR vprintf   (const char *fmtstr, va_list ap);
extern int    _VAR   _FAR vsprintf  (char *s, const char *fmtstr, va_list ap);
extern int    _FIXED _FAR _getc     (FILE *stream);
extern int    _FIXED _FAR _putc     (unsigned char c, FILE *stream);
extern FILE * _FIXED _FAR _xstream  (int);
extern int    _VAR   _FAR x_cr_flushall (void);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif  /* _STDIO_H_ */
