/*--FILE HEADER----------------------------------------------------------------
;
;   filename    : SIGNAL.H
;   version     : 0012
;   contents    : Header file for RMOS-CRUN
;   author      : P.F.
;   date        : Feb 16, 1995
;
;---FUNCTION AND RMOS ENVIRONMENT----------------------------------------------
;
;   function    : This header file supports the functions signal
;                 and raise
;
;   RMOS2 & RMOS3
;
;---END OF FILE HEADER---------------------------------------------------------
;
;---MODIFICATION HEADER--------------------------------------------------------
;
;   Feb 16, 1995  P.F.  0012  Modification for RMOS2/3 V3.1
;
;---END OF MODIFICATION HEADER-----------------------------------------------*/

#ifndef _SIGNAL_H_
#define _SIGNAL_H_                                  

#ifndef _RMCOMP_H_
#include <rmcomp.h>
#endif  /* _RMCOMP_H_ */

#if defined(_ARCHITECTURE_)  ||  defined(CADUL)
           /* ======= Intel C Compiler iC86/386 is used ======= */
           /* ======= CADUL C Compiler CC86/386 is used ======= */
#pragma varparams("signal")
#pragma fixedparams("raise")
#endif  /* _ARCHITECTURE_ || CADUL */

                                   
/* This header file defines the signal number macros. */

#define SIGFPE    0     /* floating point exception */
#define SIGILL    1     /* illegal instruction (not reset when caught)*/
#define SIGSEGV   2     /* segmentation violation */
#define SIGABRT   3     /* abort */
#define SIGTERM   4     /* software termination signal from kill */
#define SIGUSR1   5     /* user defined signal 1 */
#define SIGUSR2   6     /* user defined signal 2 */

#define NSIG      7     /* Number of valid signals */

typedef int sig_atomic_t;   /* ANSI */

#if defined (CADUL)
#define SIG_DFL ((void (_FAR *)(int,...))(void _NEAR *)0)
#define SIG_IGN ((void (_FAR *)(int,...))(void _NEAR *)1)
#define SIG_ERR ((void (_FAR *)(int,...))(void _NEAR *)-1)
#else
#define SIG_DFL ((void (_FAR *)(int,...))0)
#define SIG_IGN ((void (_FAR *)(int,...))1)
#define SIG_ERR ((void (_FAR *)(int,...))-1)
#endif


/* subcodes for user programmable interrupt handlers: 
    here: exception generated by hardware: vector number
*/

#define FPE_INTDIV0         0   /* 80x86 Integer divide by zero  INT 0  */
#define FPE_INTOVFLOW       4   /* 80x86 integer overflow:       INT 4  */
#define SEGV_BOUND          5   /* A BOUND violation:            INT 5  */
#define ILL_EXECUTION       6   /* hardware exception:           INT 6  */
#define FPE_DEVICENAVAIL    7   /* Device not available          INT 7  */
#define ILL_DOUBLEFAULT     8   /* Double fault                  INT 8  */
#define SEGV_80287          9   /* 80287 protection violation    INT 9  */
#define SEGV_INVALIDTSS     10  /* Invalid TSS                   INT 10 */
#define SEGV_SEGNPRESENT    11  /* Segment not present           INT 11 */
#define SEGV_STACK          12  /* Stack Fault                   INT 12 */
#define SEGV_PROTECTION     13  /* General protection violation: INT 13 */
#define SEGV_PAGE           14  /* Page Exceptions               INT 14 */
#define FPE_EXCEPTION       16  /* 80x87 exception:              INT 16 */
#define SEGV_ALIGN          17  /* Alignment check fault         INT 17 */


/* subcodes for user programmable interrupt handlers: 
    here: exception generated by user (signal is raise()'d)
*/
#define SIG_EXPLICITGEN     -1  /* When SIGFPE  is raise()'d            */
                                /* When SIGSEGV is raise()'d            */
                                /* When SIGILL  is raise()'d            */


#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

extern int  _FIXED _FAR raise (int);
extern void (_VAR _FAR * _VAR _FAR signal (int sig, void (_VAR _FAR * func)(int,...)))(int,...);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif  /* _SIGNAL_H_ */
